"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config = __importStar(require("./config"));
const network = __importStar(require("./network"));
const contract_1 = require("./core/contracts/contract");
const registry_1 = require("./core/contracts/registry");
const messages_1 = require("./core/messages/messages");
const typechain_1 = require("./types/typechain");
const sdkTestConfig_1 = require("./test/sdkTestConfig");
const hardhatRPC_1 = require("./test/hardhatRPC");
const identifiers_1 = require("./core/utilities/identifiers");
describe("network", () => {
    let registerId;
    hardhatRPC_1.setupSnapshot();
    const { signer, provider } = sdkTestConfig_1.setupConfig();
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield hardhatRPC_1.snapshotHardhat(provider);
        const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
        const identityContract = yield new typechain_1.Identity__factory(signer).deploy(fakeAddress);
        yield identityContract.deployed();
        const txn = yield registry_1.register(identityContract.address, "dril");
        const receipt = yield txn.wait(1);
        const registerEvent = contract_1.findEvent("DSNPRegistryUpdate", receipt.logs);
        registerId = identifiers_1.convertBigNumberToDSNPUserId(registerEvent.args[0]);
    }));
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield hardhatRPC_1.revertHardhat(provider);
    }));
    describe("follow", () => {
        describe("with a valid signer and user id", () => {
            beforeEach(() => {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer,
                    provider,
                });
            });
            it("returns a follow graph change DSNP message", () => __awaiter(void 0, void 0, void 0, function* () {
                const message = yield network.follow(registerId);
                expect(message).toMatchObject({
                    fromId: "dsnp://0000000000000000",
                    dsnpType: messages_1.DSNPType.GraphChange,
                    changeType: messages_1.DSNPGraphChangeType.Follow,
                    objectId: registerId,
                });
            }));
        });
        describe("without a signer", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer: undefined,
                    provider,
                });
                yield expect(network.follow(registerId)).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer,
                    provider,
                });
                yield expect(network.follow("dril")).rejects.toThrow(config.MissingUser);
            }));
        });
    });
    describe("unfollow", () => {
        describe("with a valid signer and user id", () => {
            beforeEach(() => {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer,
                    provider,
                });
            });
            it("returns a follow graph change DSNP message", () => __awaiter(void 0, void 0, void 0, function* () {
                const message = yield network.unfollow(registerId);
                expect(message).toMatchObject({
                    fromId: "dsnp://0000000000000000",
                    dsnpType: messages_1.DSNPType.GraphChange,
                    changeType: messages_1.DSNPGraphChangeType.Follow,
                    objectId: registerId,
                });
            }));
        });
        describe("without a signer", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer: undefined,
                    provider,
                });
                yield expect(network.unfollow(registerId)).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer,
                    provider,
                });
                yield expect(network.unfollow(registerId)).rejects.toThrow(config.MissingUser);
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25ldHdvcmsudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpREFBbUM7QUFDbkMsbURBQXFDO0FBQ3JDLHdEQUFzRDtBQUN0RCx3REFBcUQ7QUFDckQsdURBQXlFO0FBQ3pFLGlEQUFzRDtBQUN0RCx3REFBbUQ7QUFDbkQsa0RBQWtGO0FBQ2xGLDhEQUF3RjtBQUV4RixRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUN2QixJQUFJLFVBQXNCLENBQUM7SUFFM0IsMEJBQWEsRUFBRSxDQUFDO0lBQ2hCLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsMkJBQVcsRUFBRSxDQUFDO0lBRTNDLFNBQVMsQ0FBQyxHQUFTLEVBQUU7UUFDbkIsTUFBTSw0QkFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWhDLE1BQU0sV0FBVyxHQUFHLDRDQUE0QyxDQUFDO1FBQ2pFLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLDZCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqRixNQUFNLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWxDLE1BQU0sR0FBRyxHQUFHLE1BQU0sbUJBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sYUFBYSxHQUFHLG9CQUFTLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BFLFVBQVUsR0FBRywwQ0FBNEIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FB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
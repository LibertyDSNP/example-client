"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config_1 = require("./config");
const testStore_1 = __importDefault(require("./test/testStore"));
describe("config", () => {
    describe("#getConfig", () => {
        it("fetches the current config settings", () => {
            const testConfig = {
                test: "object",
            };
            config_1.setConfig(testConfig);
            expect(config_1.getConfig()).toMatchObject({ test: "object" });
        });
        it("overrides the returned settings with any provided parameters", () => {
            const testConfig = {
                test: "object",
            };
            config_1.setConfig(testConfig);
            expect(config_1.getConfig({
                otherTest: "differentObject",
            })).toMatchObject({
                test: "object",
                otherTest: "differentObject",
            });
        });
    });
    describe("#setConfig", () => {
        it("updates the config settings", () => __awaiter(void 0, void 0, void 0, function* () {
            const testConfig = {
                test: "object",
            };
            config_1.setConfig(testConfig);
            expect(config_1.getConfig()).toMatchObject({ test: "object" });
        }));
        it("does not remove existing keys in the config settings", () => __awaiter(void 0, void 0, void 0, function* () {
            config_1.setConfig({
                other_test: "blah blah",
            });
            const testConfig = {
                test: "object",
            };
            config_1.setConfig(testConfig);
            expect(config_1.getConfig()).toMatchObject({ other_test: "blah blah", test: "object" });
        }));
    });
    describe("requireGetters", () => {
        const badConfig = config_1.getConfig();
        it("requireGetSigner works", () => {
            expect(() => config_1.requireGetSigner(badConfig)).toThrow(config_1.MissingSigner);
            const signer = ethers_1.Wallet.createRandom();
            expect(config_1.requireGetSigner({ signer: signer })).toBeInstanceOf(Object);
        });
        it("requireGetProvider works", () => {
            expect(() => config_1.requireGetProvider(badConfig)).toThrow(config_1.MissingProvider);
            const testProvider = new ethers_1.providers.JsonRpcProvider("http://localhost:8383");
            expect(config_1.requireGetProvider({ provider: testProvider })).toBeInstanceOf(Object);
        });
        it("requireGetStore works", () => {
            expect(() => config_1.requireGetStore(badConfig)).toThrow(config_1.MissingStore);
            const testStore = new testStore_1.default();
            expect(config_1.requireGetStore({ store: testStore })).toBeInstanceOf(Object);
        });
        it("requireGetCurrentFromId", () => {
            expect(() => config_1.requireGetCurrentFromId(badConfig)).toThrow(config_1.MissingUser);
            const testRegistration = "0xabcd1234";
            expect(config_1.requireGetCurrentFromId({ currentFromId: testRegistration })).toEqual(testRegistration);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBMkM7QUFDM0MscUNBWWtCO0FBQ2xCLGlFQUF5QztBQUV6QyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtJQUN0QixRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUMxQixFQUFFLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1lBQzdDLE1BQU0sVUFBVSxHQUFJO2dCQUNsQixJQUFJLEVBQUUsUUFBUTthQUNPLENBQUM7WUFFeEIsa0JBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUV0QixNQUFNLENBQUMsa0JBQVMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOERBQThELEVBQUUsR0FBRyxFQUFFO1lBQ3RFLE1BQU0sVUFBVSxHQUFJO2dCQUNsQixJQUFJLEVBQUUsUUFBUTthQUNPLENBQUM7WUFFeEIsa0JBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUV0QixNQUFNLENBQ0osa0JBQVMsQ0FBRTtnQkFDVCxTQUFTLEVBQUUsaUJBQWlCO2FBQ1AsQ0FBQyxDQUN6QixDQUFDLGFBQWEsQ0FBQztnQkFDZCxJQUFJLEVBQUUsUUFBUTtnQkFDZCxTQUFTLEVBQUUsaUJBQWlCO2FBQzdCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUMxQixFQUFFLENBQUMsNkJBQTZCLEVBQUUsR0FBUyxFQUFFO1lBQzNDLE1BQU0sVUFBVSxHQUFJO2dCQUNsQixJQUFJLEVBQUUsUUFBUTthQUNPLENBQUM7WUFFeEIs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
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReaction = exports.generateReply = exports.generateBroadcast = exports.writeFixture = exports.generateDSNPStream = void 0;
const fs = __importStar(require("fs"));
const messages_1 = require("../core/messages/messages");
const test_generators_1 = require("@dsnp/test-generators");
const test_generators_2 = require("@dsnp/test-generators/");
const PREFAB_URLS = test_generators_2.sampleText.prefabURLs;
const generateEthereumAddress = test_generators_2.addresses.generateEthereumAddress;
const generateDSNPStream = (messageCount) => {
    const reactionReplyMax = 1000;
    const maxInt = reactionReplyMax * 10;
    return Array.from({ length: messageCount }, () => {
        const value = test_generators_1.randInt(maxInt);
        let msg;
        if (value > reactionReplyMax) {
            msg = value % 2 === 0 ? exports.generateReaction() : exports.generateReply();
        }
        else {
            msg = exports.generateBroadcast();
        }
        return msg;
    });
};
exports.generateDSNPStream = generateDSNPStream;
const writeFixture = (data, jsonFilePath) => {
    const ws = fs.createWriteStream(jsonFilePath).on("error", (e) => {
        throw new Error("createWriteStream failed: \n" + e.toString());
    });
    const ok = true;
    let i = 0;
    const header = '{ "entries": [';
    ws.write(header);
    do {
        ws.write(data[i] + ",");
        i++;
    } while (i < data.length - 1 && ok);
    ws.write(data[data.length - 1]);
    ws.end("]}");
    return ws.bytesWritten;
};
exports.writeFixture = writeFixture;
const generateBroadcast = (from) => {
    return {
        dsnpType: messages_1.DSNPType.Broadcast,
        fromId: from ? from : generateEthereumAddress(),
        contentHash: test_generators_1.generateHexString(64),
        url: test_generators_1.sample(PREFAB_URLS),
    };
};
exports.generateBroadcast = generateBroadcast;
const generateReply = (from) => {
    return {
        dsnpType: messages_1.DSNPType.Reply,
        fromId: from ? from : generateEthereumAddress(),
        inReplyTo: test_generators_1.generateHexString(64),
        contentHash: test_generators_1.generateHexString(64),
        url: test_generators_1.sample(PREFAB_URLS),
    };
};
exports.generateReply = generateReply;
const generateReaction = (from) => {
    return {
        dsnpType: messages_1.DSNPType.Reaction,
        fromId: from ? from : generateEthereumAddress(),
        emoji: test_generators_1.generateHexString(20),
        inReplyTo: test_generators_1.generateHexString(64),
    };
};
exports.generateReaction = generateReaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHNucEdlbmVyYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2VuZXJhdG9ycy9kc25wR2VuZXJhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXlCO0FBRXpCLHdEQUFtSDtBQUVuSCwyREFBMkU7QUFDM0UsNERBQStEO0FBRS9ELE1BQU0sV0FBVyxHQUFHLDRCQUFVLENBQUMsVUFBVSxDQUFDO0FBQzFDLE1BQU0sdUJBQXVCLEdBQUcsMkJBQVMsQ0FBQyx1QkFBdUIsQ0FBQztBQVMzRCxNQUFNLGtCQUFrQixHQUFHLENBQUMsWUFBb0IsRUFBc0IsRUFBRTtJQUU3RSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztJQU85QixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFFckMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxFQUFFLEdBQUcsRUFBRTtRQUMvQyxNQUFNLEtBQUssR0FBRyx5QkFBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLElBQUksR0FBZ0IsQ0FBQztRQUNyQixJQUFJLEtBQUssR0FBRyxnQkFBZ0IsRUFBRTtZQUU1QixHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLHFCQUFhLEVBQUUsQ0FBQztTQUM5RDthQUFNO1lBQ0wsR0FBRyxHQUFHLHlCQUFpQixFQUFFLENBQUM7U0FDM0I7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBdEJXLFFBQUEsa0JBQWtCLHNCQXNCN0I7QUFTSyxNQUFNLFlBQVksR0FBRyxDQUFDLElBQXdCLEVBQUUsWUFBb0IsRUFBVSxFQUFFO0lBQ3JGLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FB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
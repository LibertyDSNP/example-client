"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReactionBatchFile = exports.generateReplyBatchFile = exports.generateBroadcastBatchFile = exports.generateBatchReply = exports.generateBatchReaction = exports.generateBatchBroadcast = void 0;
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const parquetjs_1 = __importDefault(require("@dsnp/parquetjs"));
const dsnpGenerators_1 = require("./dsnpGenerators");
const pq = __importStar(require("../core/batch/parquetSchema"));
const test_generators_1 = require("@dsnp/test-generators");
const generateBatchBroadcast = (from) => {
    return Object.assign({ signature: test_generators_1.generateHexString(256) }, dsnpGenerators_1.generateBroadcast(from));
};
exports.generateBatchBroadcast = generateBatchBroadcast;
const generateBatchReaction = (from) => {
    return Object.assign({ signature: test_generators_1.generateHexString(256) }, dsnpGenerators_1.generateReaction(from));
};
exports.generateBatchReaction = generateBatchReaction;
const generateBatchReply = (from) => {
    return Object.assign({ signature: test_generators_1.generateHexString(256) }, dsnpGenerators_1.generateReply(from));
};
exports.generateBatchReply = generateBatchReply;
const generateBroadcastBatchFile = (rootDir, numMessages) => __awaiter(void 0, void 0, void 0, function* () {
    return yield writeBatchFileWithOptions({
        rootDir: rootDir,
        numMessages: numMessages,
        schema: pq.BroadcastSchema,
        generator: exports.generateBatchBroadcast,
        bloomOptions: pq.BroadcastBloomFilterOptions,
    });
});
exports.generateBroadcastBatchFile = generateBroadcastBatchFile;
const generateReplyBatchFile = (rootDir, numMessages) => __awaiter(void 0, void 0, void 0, function* () {
    return yield writeBatchFileWithOptions({
        rootDir: rootDir,
        numMessages: numMessages,
        schema: pq.ReplySchema,
        generator: exports.generateBatchReply,
        bloomOptions: pq.ReplyBloomFilterOptions,
    });
});
exports.generateReplyBatchFile = generateReplyBatchFile;
const generateReactionBatchFile = (rootDir, numMessages) => __awaiter(void 0, void 0, void 0, function* () {
    return yield writeBatchFileWithOptions({
        rootDir: rootDir,
        numMessages: numMessages,
        schema: pq.ReactionSchema,
        generator: exports.generateBatchReaction,
        bloomOptions: pq.ReactionBloomFilterOptions,
    });
});
exports.generateReactionBatchFile = generateReactionBatchFile;
const writeBatchFileWithOptions = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (opts.rootDir === "") {
        throw new Error("rootDir can't be blank");
    }
    ensureDir(opts.rootDir);
    const parquetFileName = ["replies", opts.numMessages, timestamp()].join("-") + ".parquet";
    const fname = path_1.default.join(opts.rootDir, parquetFileName);
    let itemsWritten = 0;
    try {
        const data = Array.from({ length: opts.numMessages }, () => opts.generator());
        const pSchema = new parquetjs_1.default.ParquetSchema(opts.schema);
        const writer = yield parquetjs_1.default.ParquetWriter.openFile(pSchema, fname, opts.bloomOptions);
        for (let i = 0; i < data.length; i++) {
            yield writer.appendRow(data[i]);
            itemsWritten++;
        }
        yield writer.close();
    }
    catch (e) {
        return { records: -1, path: fname, error: e.toString() };
    }
    return { records: itemsWritten, path: fname, error: "" };
});
const timestamp = () => {
    const now = new Date(Date.now());
    return [
        now.getUTCFullYear(),
        now.getUTCMonth(),
        now.getUTCDay(),
        "-",
        now.getUTCHours(),
        now.getUTCMinutes(),
        now.getUTCSeconds(),
        "-",
        now.getUTCMilliseconds(),
    ].join("");
};
const ensureDir = (dirname) => {
    if (!fs.existsSync(dirname)) {
        throw new Error(`directory does not exist: ${dirname}`);
    }
    else {
        const stats = fs.statSync(dirname);
        if (!stats.isDirectory()) {
            throw new Error(`is not a directory: ${dirname}`);
        }
    }
    return dirname;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2hGaWxlR2VuZXJhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nZW5lcmF0b3JzL2JhdGNoRmlsZUdlbmVyYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHVDQUF5QjtBQUN6QixnREFBd0I7QUFDeEIsZ0VBQXNDO0FBQ3RDLHFEQUFzRjtBQUN0RixnRUFBa0Q7QUFHbEQsMkRBQTBEO0FBZ0JuRCxNQUFNLHNCQUFzQixHQUFHLENBQUMsSUFBc0IsRUFBeUIsRUFBRTtJQUN0Rix1QkFBUyxTQUFTLEVBQUUsbUNBQWlCLENBQUMsR0FBRyxDQUFDLElBQUssa0NBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUc7QUFDM0UsQ0FBQyxDQUFDO0FBRlcsUUFBQSxzQkFBc0IsMEJBRWpDO0FBRUssTUFBTSxxQkFBcUIsR0FBRyxDQUFDLElBQXNCLEVBQXdCLEVBQUU7SUFDcEYsdUJBQVMsU0FBUyxFQUFFLG1DQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFLLGlDQUFnQixDQUFDLElBQUksQ0FBQyxFQUFHO0FBQzFFLENBQUMsQ0FBQztBQUZXLFFBQUEscUJBQXFCLHlCQUVoQztBQUVLLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFzQixFQUFxQixFQUFFO0lBQzlFLHVCQUFTLFNBQVMsRUFBRSxtQ0FBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSyw4QkFBYSxDQUFDLElBQUksQ0FBQyxFQUFHO0FBQ3ZFLENBQUMsQ0FBQztBQUZXLFFBQUEsa0JBQWtCLHNCQUU3QjtBQUVLLE1BQU0sMEJBQTBCLEdBQUcsQ0FDeEMsT0FBZSxFQUNmLFdBQW1CLEVBQ1ksRUFBRTtJQUNqQyxPQUFPLE1BQU0seUJBQXlCLENBQUM7UUFDckMsT0FBTyxFQUFFLE9BQU87UUFDaEIsV0FBVyxFQUFFLFdBQVc7UUFDeEIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxlQUFlO1FBQzFCLFNB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
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContracts = exports.requireGetCurrentFromId = exports.requireGetStore = exports.requireGetSigner = exports.requireGetProvider = exports.setConfig = exports.getConfig = exports.MissingUser = exports.MissingStore = exports.MissingProvider = exports.MissingSigner = exports.MissingContract = void 0;
exports.MissingContract = new Error("Contract was not found");
exports.MissingSigner = new Error("Signer is not set.");
exports.MissingProvider = new Error("Blockchain provider is not set.");
exports.MissingStore = new Error("Store adapter was not found");
exports.MissingUser = new Error("No user id found. Please authenticate a handle.");
let config = {
    contracts: {},
};
const getConfig = (overrides) => {
    if (!overrides)
        return config;
    return Object.assign(Object.assign(Object.assign({}, config), overrides), { contracts: Object.assign(Object.assign({}, config.contracts), overrides.contracts) });
};
exports.getConfig = getConfig;
const setConfig = (newConfig) => {
    const { signer, provider } = newConfig;
    if (provider && signer && !signer.provider)
        newConfig.signer = signer.connect(provider);
    return (config = Object.assign(Object.assign({}, config), newConfig));
};
exports.setConfig = setConfig;
const requireGetProvider = (opts) => {
    const c = exports.getConfig(opts);
    if (!c.provider)
        throw exports.MissingProvider;
    return c.provider;
};
exports.requireGetProvider = requireGetProvider;
const requireGetSigner = (opts) => {
    const c = exports.getConfig(opts);
    if (!c.signer)
        throw exports.MissingSigner;
    return c.signer;
};
exports.requireGetSigner = requireGetSigner;
const requireGetStore = (opts) => {
    const c = exports.getConfig(opts);
    if (!c.store)
        throw exports.MissingStore;
    return c.store;
};
exports.requireGetStore = requireGetStore;
const requireGetCurrentFromId = (opts) => {
    const c = exports.getConfig(opts);
    if (!c.currentFromId)
        throw exports.MissingUser;
    return c.currentFromId;
};
exports.requireGetCurrentFromId = requireGetCurrentFromId;
const getContracts = (opts) => {
    const c = exports.getConfig(opts);
    return c.contracts;
};
exports.getContracts = getContracts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLYSxRQUFBLGVBQWUsR0FBRyxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3RELFFBQUEsYUFBYSxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDaEQsUUFBQSxlQUFlLEdBQUcsSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUMvRCxRQUFBLFlBQVksR0FBRyxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQ3hELFFBQUEsV0FBVyxHQUFHLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7QUF3Q3hGLElBQUksTUFBTSxHQUFXO0lBQ25CLFNBQVMsRUFBRSxFQUFFO0NBQ2QsQ0FBQztBQVFLLE1BQU0sU0FBUyxHQUFHLENBQUMsU0FBc0IsRUFBVSxFQUFFO0lBQzFELElBQUksQ0FBQyxTQUFTO1FBQUUsT0FBTyxNQUFNLENBQUM7SUFFOUIscURBQ0ssTUFBTSxHQUNOLFNBQVMsS0FDWixTQUFTLGtDQUFPLE1BQU0sQ0FBQyxTQUFTLEdBQUssU0FBUyxDQUFDLFNBQVMsS0FDeEQ7QUFDSixDQUFDLENBQUM7QUFSVyxRQUFBLFNBQVMsYUFRcEI7QUFXSyxNQUFNLFNBQVMsR0FBRyxDQUFDLFNBQXFCLEVBQVUsRUFBRTtJQUN6RCxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUN2QyxJQUFJLFFBQVEsSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtRQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RixPQUFPLENBQUMsTUFBTSxtQ0FDVCxNQUFNLEdBQ04sU0FBUyxDQUNiLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVBXLFFBQUEsU0FBUyxhQU9wQjtBQVFLLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFpQixFQUE2QixFQUFFO0lBQ2pGLE1BQU0sQ0FBQyxHQUFHLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQUUsTUFBTSx1QkFBZSxDQUFDO0lBQ3ZDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFKVyxRQUFBLGtCQUFrQixzQkFJN0I7QUFRSyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBaUIsRUFBaUIsRUFBRTtJQUNuRSxNQUFNLENBQUMsR0FBRyxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTTtRQUFFLE1BQU0scUJBQWEsQ0FBQztJQUNuQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBSlcsUUFBQSxnQkFBZ0Isb0JBSTNCO0FBUUssTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFpQixFQUFrQixFQUFFO0lBQ25FLE1BQU0sQ0FBQyxHQUFHLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxvQkFBWSxDQUFDO0lBQ2pDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNqQixDQUFDLENBQUM7QUFKVyxRQUFBLGVBQWUsbUJBSTFCO0FBUUssTUFBTSx1QkFBdUIsR0FBRyxDQUFDLElBQWlCLEVBQVUsRUFBRTtJQUNuRSxNQUFNLENBQUMsR0FBRyxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYTtRQUFFLE1BQU0sbUJBQVcsQ0FBQztJQUN4QyxPQUFPLENBQUMsQ0FBQyxhQUFhLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBSlcsUUFBQSx1QkFBdUIsMkJBSWxDO0FBT0ssTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFpQixFQUFhLEVBQUU7SUFDM0QsTUFBTSxDQUFDLEdBQUcsaUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDckIsQ0FBQyxDQUFDO0FBSFcsUUFBQSxZQUFZLGdCQUd2QiJ9
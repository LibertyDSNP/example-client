"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupSnapshot = exports.revertHardhat = exports.snapshotHardhat = void 0;
require("dotenv").config();
const ethers_1 = require("ethers");
const RPC_URL = String(process.env.RPC_URL);
let latestSnapshot = [];
const snapshotHardhat = (provider) => __awaiter(void 0, void 0, void 0, function* () {
    latestSnapshot.push(yield provider.send("evm_snapshot", []));
});
exports.snapshotHardhat = snapshotHardhat;
const revertHardhat = (provider) => __awaiter(void 0, void 0, void 0, function* () {
    const revertResponse = yield provider.send("evm_revert", [latestSnapshot.pop()]);
    expect(revertResponse.error).toBeUndefined();
});
exports.revertHardhat = revertHardhat;
const setupSnapshot = () => {
    let provider;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        provider = new ethers_1.ethers.providers.JsonRpcProvider(RPC_URL);
    }));
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        yield exports.snapshotHardhat(provider);
    }));
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        yield exports.revertHardhat(provider);
    }));
};
exports.setupSnapshot = setupSnapshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFyZGhhdFJQQy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0L2hhcmRoYXRSUEMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzNCLG1DQUFnQztBQUVoQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUc1QyxJQUFJLGNBQWMsR0FBYSxFQUFFLENBQUM7QUFFM0IsTUFBTSxlQUFlLEdBQUcsQ0FBTyxRQUEwQyxFQUFpQixFQUFFO0lBQ2pHLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9ELENBQUMsQ0FBQSxDQUFDO0FBRlcsUUFBQSxlQUFlLG1CQUUxQjtBQUVLLE1BQU0sYUFBYSxHQUFHLENBQU8sUUFBMEMsRUFBaUIsRUFBRTtJQUMvRixNQUFNLGNBQWMsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRixNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQy9DLENBQUMsQ0FBQSxDQUFDO0FBSFcsUUFBQSxhQUFhLGlCQUd4QjtBQUVLLE1BQU0sYUFBYSxHQUFHLEdBQVMsRUFBRTtJQUN0QyxJQUFJLFFBQTBDLENBQUM7SUFFL0MsU0FBUyxDQUFDLEdBQVMsRUFBRTtRQUNuQixRQUFRLEdBQUcsSUFBSSxlQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQVMsRUFBRTtRQUVwQixNQUFNLHVCQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFTLEVBQUU7UUFDbkIsTUFBTSxxQkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFmVyxRQUFBLGFBQWEsaUJBZXhCIn0=
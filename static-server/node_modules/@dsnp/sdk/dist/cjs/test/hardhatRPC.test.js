"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv").config();
const ethers_1 = require("ethers");
const js_sha3_1 = require("js-sha3");
const publisher_1 = require("../core/contracts/publisher");
const config_1 = require("../config");
const hardhatRPC_1 = require("./hardhatRPC");
const TESTING_PRIVATE_KEY = String(process.env.TESTING_PRIVATE_KEY);
const RPC_URL = String(process.env.RPC_URL);
const provider = new ethers_1.ethers.providers.JsonRpcProvider(RPC_URL);
beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
    const oldConfig = yield config_1.getConfig();
    yield config_1.setConfig({
        contracts: {},
        provider: provider,
        signer: new ethers_1.ethers.Wallet(TESTING_PRIVATE_KEY, provider),
        store: oldConfig.store,
        queue: oldConfig.queue,
    });
}));
describe("snapshot and revert", () => {
    it("clears changes after revert", () => __awaiter(void 0, void 0, void 0, function* () {
        const filter = yield publisher_1.dsnpBatchFilter();
        jest.setTimeout(12000);
        yield hardhatRPC_1.snapshotHardhat(provider);
        const testUrl = "http://www.testconst.com";
        const hash = "0x" + js_sha3_1.keccak256("test");
        const publications = [{ dsnpType: 0, url: testUrl, hash: hash }];
        yield publisher_1.publish(publications);
        const batchEventLogs1 = yield provider.getLogs(filter);
        expect(batchEventLogs1.length).toEqual(1);
        yield hardhatRPC_1.revertHardhat(provider);
        const batchEventsLogs2 = yield provider.getLogs(filter);
        expect(batchEventsLogs2.length).toEqual(0);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFyZGhhdFJQQy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rlc3QvaGFyZGhhdFJQQy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzNCLG1DQUFnQztBQUNoQyxxQ0FBb0M7QUFDcEMsMkRBQXVFO0FBQ3ZFLHNDQUFpRDtBQUNqRCw2Q0FBOEQ7QUFFOUQsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLE1BQU0sUUFBUSxHQUFHLElBQUksZUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFL0QsVUFBVSxDQUFDLEdBQVMsRUFBRTtJQUNwQixNQUFNLFNBQVMsR0FBRyxNQUFNLGtCQUFTLEVBQUUsQ0FBQztJQUNwQyxNQUFNLGtCQUFTLENBQUM7UUFDZCxTQUFTLEVBQUUsRUFBRTtRQUNiLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLE1BQU0sRUFBRSxJQUFJLGVBQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxDQUFDO1FBQ3hELEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSztRQUN0QixLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUs7S0FDdkIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEdBQVMsRUFBRTtRQUMzQyxNQUFNLE1BQU0sR0FBRyxNQUFNLDJCQUFlLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBR3ZCLE1BQU0sNEJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVoQyxNQUFNLE9BQU8sR0FBRywwQkFBMEIsQ0FBQztRQUMzQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsbUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0QyxNQUFNLFlBQVksR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBR2pFLE1BQU0sbUJBQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU1QixNQUFNLGVBQWUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdkQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFHMUMsTUFBTSwwQkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRzlCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upsertDelegate = exports.upsertDelegateBySignature = exports.getNonceForDelegate = exports.createAddDelegateEip712TypedData = exports.getDomainSeparator = exports.isAuthorizedTo = exports.createAndRegisterBeaconProxy = exports.createBeaconProxyWithOwner = exports.createBeaconProxy = exports.createCloneProxyWithOwner = exports.createCloneProxy = exports.Permission = exports.DelegationRole = void 0;
const config_1 = require("../../config");
const typechain_1 = require("../../types/typechain");
const utilities_1 = require("./utilities");
const contract_1 = require("./contract");
const IDENTITY_CLONE_FACTORY_CONTRACT = "IdentityCloneFactory";
const IDENTITY_CONTRACT = "Identity";
const BEACON_FACTORY_CONTRACT = "BeaconFactory";
const BEACON_CONTRACT = "Beacon";
var DelegationRole;
(function (DelegationRole) {
    DelegationRole[DelegationRole["NONE"] = 0] = "NONE";
    DelegationRole[DelegationRole["OWNER"] = 1] = "OWNER";
    DelegationRole[DelegationRole["ANNOUNCER"] = 2] = "ANNOUNCER";
})(DelegationRole = exports.DelegationRole || (exports.DelegationRole = {}));
var Permission;
(function (Permission) {
    Permission[Permission["NONE"] = 0] = "NONE";
    Permission[Permission["ANNOUNCE"] = 1] = "ANNOUNCE";
    Permission[Permission["OWNERSHIP_TRANSFER"] = 2] = "OWNERSHIP_TRANSFER";
    Permission[Permission["DELEGATE_ADD"] = 3] = "DELEGATE_ADD";
    Permission[Permission["DELEGATE_REMOVE"] = 4] = "DELEGATE_REMOVE";
})(Permission = exports.Permission || (exports.Permission = {}));
const createCloneProxy = (logic, opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (!logic)
        logic = yield getIdentityLogicContractAddress(opts);
    const contract = yield getIdentityCloneFactoryContract(opts);
    return contract.createCloneProxy(logic);
});
exports.createCloneProxy = createCloneProxy;
const createCloneProxyWithOwner = (owner, logic, opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (!logic)
        logic = yield getIdentityLogicContractAddress(opts);
    const contract = yield getIdentityCloneFactoryContract(opts);
    return contract.createCloneProxyWithOwner(logic, owner);
});
exports.createCloneProxyWithOwner = createCloneProxyWithOwner;
const createBeaconProxy = (beacon, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getBeaconFactoryContract(opts);
    return contract["createBeaconProxy(address)"](beacon);
});
exports.createBeaconProxy = createBeaconProxy;
const createBeaconProxyWithOwner = (owner, beacon, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getBeaconFactoryContract(opts);
    return contract.createBeaconProxyWithOwner(beacon, owner);
});
exports.createBeaconProxyWithOwner = createBeaconProxyWithOwner;
const createAndRegisterBeaconProxy = (userAddress, handle, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const beaconFactory = yield getBeaconFactoryContract(opts);
    const beaconAddr = yield getBeaconAddress(opts);
    return yield beaconFactory.createAndRegisterBeaconProxy(beaconAddr, userAddress, handle);
});
exports.createAndRegisterBeaconProxy = createAndRegisterBeaconProxy;
const getIdentityLogicContractAddress = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { identityLogic } = config_1.getContracts(opts);
    const provider = config_1.requireGetProvider(opts);
    const address = identityLogic || (yield contract_1.getContractAddress(provider, IDENTITY_CONTRACT));
    if (!address)
        throw config_1.MissingContract;
    return address;
});
const getIdentityCloneFactoryContract = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { identityCloneFactory } = config_1.getContracts(opts);
    const signer = config_1.requireGetSigner(opts);
    const provider = config_1.requireGetProvider(opts);
    const address = identityCloneFactory || (yield contract_1.getContractAddress(provider, IDENTITY_CLONE_FACTORY_CONTRACT));
    if (!address)
        throw config_1.MissingContract;
    return typechain_1.IdentityCloneFactory__factory.connect(address, signer);
});
const getBeaconFactoryContract = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { beaconFactory } = config_1.getContracts(opts);
    const signer = config_1.requireGetSigner(opts);
    const provider = config_1.requireGetProvider(opts);
    const address = beaconFactory || (yield contract_1.getContractAddress(provider, BEACON_FACTORY_CONTRACT));
    if (!address)
        throw config_1.MissingContract;
    return typechain_1.BeaconFactory__factory.connect(address, signer);
});
const isAuthorizedTo = (address, contractAddress, permission, blockNumber, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = config_1.requireGetProvider(opts);
    if (!provider)
        throw config_1.MissingProvider;
    return typechain_1.Identity__factory.connect(contractAddress, provider).isAuthorizedTo(address, permission, blockNumber);
});
exports.isAuthorizedTo = isAuthorizedTo;
const getBeaconAddress = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { beacon } = config_1.getContracts(opts);
    const provider = config_1.requireGetProvider(opts);
    const address = beacon || (yield contract_1.getContractAddress(provider, BEACON_CONTRACT));
    if (!address)
        throw config_1.MissingContract;
    return address;
});
const getDomainSeparator = (contractAddress, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = config_1.requireGetProvider(opts);
    return {
        name: "Identity",
        version: "1",
        chainId: (yield provider.getNetwork()).chainId,
        verifyingContract: contractAddress,
        salt: "0xa0bec69846cdcc8c1ba1eb93be1c5728385a9e26062a73e238b1beda189ac4c9",
    };
});
exports.getDomainSeparator = getDomainSeparator;
const createAddDelegateEip712TypedData = (contractAddress, message, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const primaryType = "DelegateAdd";
    const addDelegateType = [
        { name: "nonce", type: "uint32" },
        { name: "delegateAddr", type: "address" },
        { name: "role", type: "uint8" },
    ];
    const delegateAddMessage = Object.assign({ nonce: message.nonce || (yield exports.getNonceForDelegate(contractAddress, message.delegateAddr)) }, message);
    const domainData = yield exports.getDomainSeparator(contractAddress, opts);
    return utilities_1.createTypedData(domainData, primaryType, delegateAddMessage, { DelegateAdd: addDelegateType });
});
exports.createAddDelegateEip712TypedData = createAddDelegateEip712TypedData;
const getNonceForDelegate = (contractAddress, delegateAddress, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = config_1.requireGetProvider(opts);
    return yield typechain_1.Identity__factory.connect(contractAddress, provider).getNonceForDelegate(delegateAddress);
});
exports.getNonceForDelegate = getNonceForDelegate;
const upsertDelegateBySignature = (contractAddress, signature, message, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const signer = config_1.requireGetSigner(opts);
    const provider = config_1.requireGetProvider(opts);
    const { v, r, s } = signature;
    const contract = yield typechain_1.Identity__factory.connect(contractAddress, provider);
    return contract.connect(signer).delegateByEIP712Sig(v, r, s, message);
});
exports.upsertDelegateBySignature = upsertDelegateBySignature;
const upsertDelegate = (contractAddress, address, role, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const signer = config_1.requireGetSigner(opts);
    const provider = config_1.requireGetProvider(opts);
    const contract = yield typechain_1.Identity__factory.connect(contractAddress, provider);
    return contract.connect(signer).delegate(address, role);
});
exports.upsertDelegate = upsertDelegate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9jb250cmFjdHMvaWRlbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EseUNBT3NCO0FBRXRCLHFEQU0rQjtBQUMvQiwyQ0FPcUI7QUFDckIseUNBQWdEO0FBRWhELE1BQU0sK0JBQStCLEdBQUcsc0JBQXNCLENBQUM7QUFDL0QsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUM7QUFDckMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDaEQsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDO0FBS2pDLElBQVksY0FJWDtBQUpELFdBQVksY0FBYztJQUN4QixtREFBVSxDQUFBO0lBQ1YscURBQVcsQ0FBQTtJQUNYLDZEQUFlLENBQUE7QUFDakIsQ0FBQyxFQUpXLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBSXpCO0FBRUQsSUFBWSxVQU1YO0FBTkQsV0FBWSxVQUFVO0lBQ3BCLDJDQUFJLENBQUE7SUFDSixtREFBUSxDQUFBO0lBQ1IsdUVBQWtCLENBQUE7SUFDbEIsMkRBQVksQ0FBQTtJQUNaLGlFQUFlLENBQUE7QUFDakIsQ0FBQyxFQU5XLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBTXJCO0FBU00sTUFBTSxnQkFBZ0IsR0FBRyxDQUFPLEtBQXVCLEVBQUUsSUFBaUIsRUFBZ0MsRUFBRTtJQUNqSCxJQUFJLENBQUMsS0FBSztRQUFFLEtBQUssR0FBRyxNQUFNLCtCQUErQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sUUFBUSxHQUFHLE1BQU0sK0JBQStCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0QsT0FBTyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFBLENBQUM7QUFKVyxRQUFBLGdCQUFnQixvQkFJM0I7QUFVSyxNQUFNLHlCQUF5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
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_sha3_1 = require("js-sha3");
const publisher_1 = require("./publisher");
const sdkTestConfig_1 = require("../../test/sdkTestConfig");
const hardhatRPC_1 = require("../../test/hardhatRPC");
const config_1 = require("../../config");
describe("#batch", () => {
    hardhatRPC_1.setupSnapshot();
    beforeAll(sdkTestConfig_1.setupConfig);
    it("successfully publishes a batch to the chain", () => __awaiter(void 0, void 0, void 0, function* () {
        jest.setTimeout(12000);
        const testUrl = "http://www.testconst.com";
        const hash = "0x" + js_sha3_1.keccak256("test");
        const publications = [{ dsnpType: 0, url: testUrl, hash: hash }];
        yield publisher_1.publish(publications);
        const provider = config_1.requireGetProvider();
        const logs = yield provider.getLogs({ fromBlock: "latest" });
        expect(logs).toHaveLength(1);
        expect(logs[0].data).toEqual("0x9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb65800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000018687474703a2f2f7777772e74657374636f6e73742e636f6d0000000000000000");
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9jb250cmFjdHMvcHVibGlzaGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBb0M7QUFFcEMsMkNBQW1EO0FBQ25ELDREQUF1RDtBQUN2RCxzREFBc0Q7QUFDdEQseUNBQWtEO0FBRWxELFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO0lBQ3RCLDBCQUFhLEVBQUUsQ0FBQztJQUVoQixTQUFTLENBQUMsMkJBQVcsQ0FBQyxDQUFDO0lBRXZCLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxHQUFTLEVBQUU7UUFDM0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QixNQUFNLE9BQU8sR0FBRywwQkFBMEIsQ0FBQztRQUMzQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsbUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0QyxNQUFNLFlBQVksR0FBa0IsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUVoRixNQUFNLG1CQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUIsTUFBTSxRQUFRLEdBQUcsMkJBQWtCLEVBQUUsQ0FBQztRQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUMxQixvUUFBb1EsQ0FDclEsQ0FBQztJQUNKLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const contract_1 = require("./contract");
const identity = __importStar(require("./identity"));
const { createCloneProxy, createCloneProxyWithOwner, createBeaconProxy, createBeaconProxyWithOwner, createAndRegisterBeaconProxy, isAuthorizedTo, Permission, upsertDelegate, createAddDelegateEip712TypedData, upsertDelegateBySignature, getDomainSeparator, } = identity;
const matchers_1 = require("../../test/matchers");
const sdkTestConfig_1 = require("../../test/sdkTestConfig");
const hardhatRPC_1 = require("../../test/hardhatRPC");
const config_1 = require("../../config");
const typechain_1 = require("../../types/typechain");
const EIP712_1 = require("../../test/helpers/EIP712");
const OWNER = "0x70997970c51812dc3a010c7d01b50e0d17dc79c8";
const NON_OWNER = "0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc";
describe("identity", () => {
    let provider;
    let signer;
    hardhatRPC_1.setupSnapshot();
    beforeAll(() => {
        ({ provider, signer } = sdkTestConfig_1.setupConfig());
    });
    const getBeacon = () => __awaiter(void 0, void 0, void 0, function* () {
        const addr = yield contract_1.getContractAddress(provider, "Beacon");
        if (!addr)
            throw config_1.MissingContract;
        return addr;
    });
    describe("createCloneProxy", () => {
        it("creates a proxy contract", () => __awaiter(void 0, void 0, void 0, function* () {
            const proxyReceipt = (yield (yield createCloneProxy()).wait());
            const proxyContractEvents = proxyReceipt && proxyReceipt.events
                ? proxyReceipt.events.filter((event) => {
                    return event.event === "ProxyCreated";
                })
                : [];
            const contractAddress = proxyContractEvents[0].args ? proxyContractEvents[0].args[0] : null;
            expect(contractAddress).toMatch(matchers_1.EthAddressRegex);
        }));
    });
    describe("createCloneProxy with owner", () => {
        let proxyReceipt;
        let proxyContractEvents;
        let contractAddress;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            proxyReceipt = (yield (yield createCloneProxyWithOwner(OWNER)).wait());
            proxyContractEvents =
                proxyReceipt && proxyReceipt.events && proxyReceipt
                    ? proxyReceipt.events.filter((event) => {
                        return event.event === "ProxyCreated";
                    })
                    : [];
            contractAddress = proxyContractEvents[0].args ? proxyContractEvents[0].args[0] : null;
        }));
        it("creates a proxy contract", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(contractAddress).toMatch(matchers_1.EthAddressRegex);
        }));
        it("expect isAuthorizedTo to return true for owner", () => __awaiter(void 0, void 0, void 0, function* () {
            const authorized = yield isAuthorizedTo(OWNER, contractAddress, Permission.ANNOUNCE, 0);
            expect(authorized).toBe(true);
        }));
        it("expect isAuthorizedTo to return false for non owner", () => __awaiter(void 0, void 0, void 0, function* () {
            const authorized = yield isAuthorizedTo(NON_OWNER, contractAddress, Permission.ANNOUNCE, 0);
            expect(authorized).toBe(false);
        }));
    });
    describe("createBeaconProxy", () => {
        it("creates a beacon proxy contract with specified beacon", () => __awaiter(void 0, void 0, void 0, function* () {
            const beacon = yield getBeacon();
            const proxyReceipt = (yield (yield createBeaconProxy(beacon)).wait());
            const proxyContractEvents = proxyReceipt && proxyReceipt.events
                ? proxyReceipt.events.filter((event) => {
                    return event.event === "ProxyCreated";
                })
                : [];
            const contractAddress = proxyContractEvents[0].args ? proxyContractEvents[0].args[0] : null;
            expect(contractAddress).toMatch(matchers_1.EthAddressRegex);
        }));
    });
    describe("createBeaconProxyWithOwner", () => {
        let proxyReceipt;
        let proxyContractEvents;
        let contractAddress;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            const beacon = yield getBeacon();
            proxyReceipt = (yield (yield createBeaconProxyWithOwner(OWNER, beacon)).wait());
            proxyContractEvents =
                proxyReceipt && proxyReceipt.events
                    ? proxyReceipt.events.filter((event) => {
                        return event.event === "ProxyCreated";
                    })
                    : [];
            contractAddress = proxyContractEvents[0].args ? proxyContractEvents[0].args[0] : null;
        }));
        it("creates a beacon proxy contract", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(contractAddress).toMatch(matchers_1.EthAddressRegex);
        }));
        it("expect isAuthorized  to return false or nonOwner", () => __awaiter(void 0, void 0, void 0, function* () {
            const authorized = yield isAuthorizedTo(NON_OWNER, contractAddress, Permission.ANNOUNCE, 0);
            expect(authorized).toBe(false);
        }));
        it("expect isAuthorizedTo to return true for owner", () => __awaiter(void 0, void 0, void 0, function* () {
            const authorized = yield isAuthorizedTo(OWNER, contractAddress, Permission.ANNOUNCE, 0);
            expect(authorized).toBe(true);
        }));
    });
    describe("#createAndRegisterBeaconProxy", () => {
        const handle = "flarp";
        const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
        it("returns a Contract Transaction that can be resolved into a DSNP User Id", () => __awaiter(void 0, void 0, void 0, function* () {
            const transaction = yield createAndRegisterBeaconProxy(fakeAddress, handle);
            const receipt = yield transaction.wait(1);
            expect(getIdFromReceipt(receipt).toNumber()).toBeGreaterThan(999);
            const address = getAddressFromReceipt(receipt);
            expect(ethers_1.ethers.utils.isAddress(address)).toBeTruthy();
        }));
    });
    describe("#getDomainSeparator", () => {
        it("returns a EIP712 domain separator", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeContractAddress = "0xfake";
            const expected = {
                chainId: expect.any(Number),
                name: "Identity",
                salt: "0xa0bec69846cdcc8c1ba1eb93be1c5728385a9e26062a73e238b1beda189ac4c9",
                verifyingContract: "0xfake",
                version: "1",
            };
            expect(yield getDomainSeparator(fakeContractAddress)).toEqual(expected);
        }));
    });
    describe("#upsertDelegate", () => {
        let contractAddress;
        let contractOwner;
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            contractOwner = yield signer.getAddress();
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(contractOwner);
            yield identityContract.deployed();
            contractAddress = identityContract.address;
        }));
        it("adds a new delegate", () => __awaiter(void 0, void 0, void 0, function* () {
            yield upsertDelegate(contractAddress, NON_OWNER, 0x1);
            expect(yield isAuthorizedTo(NON_OWNER, contractAddress, 2, 60)).toBeTruthy();
        }));
        it("updates a delegate's role", () => __awaiter(void 0, void 0, void 0, function* () {
            yield upsertDelegate(contractAddress, NON_OWNER, 0x2);
            expect(yield isAuthorizedTo(NON_OWNER, contractAddress, 1, 60)).toBeTruthy();
        }));
    });
    describe("#createAddDelegateEip712TypedData", () => {
        let contractAddress;
        let contractOwner;
        let typedData;
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            contractOwner = yield signer.getAddress();
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(contractOwner);
            yield identityContract.deployed();
            contractAddress = identityContract.address;
            typedData = {
                types: {
                    EIP712Domain: [
                        { name: "name", type: "string" },
                        { name: "version", type: "string" },
                        { name: "chainId", type: "uint256" },
                        { name: "verifyingContract", type: "address" },
                        { name: "salt", type: "bytes32" },
                    ],
                    DelegateAdd: [
                        { name: "nonce", type: "uint32" },
                        { name: "delegateAddr", type: "address" },
                        { name: "role", type: "uint8" },
                    ],
                },
                primaryType: "DelegateAdd",
                domain: {
                    chainId: expect.any(Number),
                    name: "Identity",
                    salt: "0xa0bec69846cdcc8c1ba1eb93be1c5728385a9e26062a73e238b1beda189ac4c9",
                    verifyingContract: contractAddress,
                    version: "1",
                },
            };
        }));
        describe("when nonce is included in message", () => {
            const message = {
                delegateAddr: "0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc",
                nonce: 3,
                role: 0x1,
            };
            it("creates an EIP712 data type with the nonce included", () => __awaiter(void 0, void 0, void 0, function* () {
                const expected = Object.assign(Object.assign({}, typedData), { message });
                expect(yield createAddDelegateEip712TypedData(contractAddress, message)).toEqual(expected);
            }));
            it("does not call #getNonceForDelegate", () => __awaiter(void 0, void 0, void 0, function* () {
                jest.spyOn(identity, "getNonceForDelegate");
                yield createAddDelegateEip712TypedData(contractAddress, message);
                expect(identity.getNonceForDelegate).not.toHaveBeenCalled();
            }));
        });
        describe("when nonce is not included in message", () => {
            const message = {
                delegateAddr: "0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc",
                role: 0x1,
            };
            it("creates an EIP-712 data type and resolves the nonce", () => __awaiter(void 0, void 0, void 0, function* () {
                const expected = Object.assign(Object.assign({}, typedData), { message: Object.assign(Object.assign({}, message), { nonce: 0 }) });
                expect(yield createAddDelegateEip712TypedData(contractAddress, message)).toEqual(expected);
            }));
            it("calls #getNonceForDelegate", () => __awaiter(void 0, void 0, void 0, function* () {
                jest.spyOn(identity, "getNonceForDelegate");
                yield createAddDelegateEip712TypedData(contractAddress, message);
                expect(identity.getNonceForDelegate).toHaveBeenCalled();
            }));
        });
    });
    describe("#upsertDelegateBySignature", () => {
        let contractAddress;
        let contractOwner;
        const message = {
            delegateAddr: NON_OWNER,
            role: 0x1,
        };
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            contractOwner = yield signer.getAddress();
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(contractOwner);
            yield identityContract.deployed();
            contractAddress = identityContract.address;
        }));
        describe("when signature is valid", () => {
            it("adds a delegate", () => __awaiter(void 0, void 0, void 0, function* () {
                const typedData = yield createAddDelegateEip712TypedData(contractAddress, message);
                const { r, s, v } = yield EIP712_1.signEIP712Message(contractOwner, provider, typedData);
                yield upsertDelegateBySignature(contractAddress, { r, s, v }, typedData.message);
                expect(yield isAuthorizedTo(NON_OWNER, contractAddress, 2, 60)).toBeTruthy();
            }));
        });
        describe("when signature is not valid", () => {
            it("throws error", () => __awaiter(void 0, void 0, void 0, function* () {
                const typedData = yield createAddDelegateEip712TypedData(contractAddress, message);
                const { r, s, v } = yield EIP712_1.signEIP712Message(contractOwner, provider, typedData);
                const addDelegatePendingTx = upsertDelegateBySignature(contractAddress, { r, s, v }, {
                    nonce: 777,
                    role: 1,
                    delegateAddr: NON_OWNER,
                });
                yield expect(addDelegatePendingTx).transactionRejectsWith(/Signer does not have the DELEGATE_ADD permission/);
            }));
        });
    });
});
const getIdFromReceipt = (receipt) => {
    const registerEvent = contract_1.findEvent("DSNPRegistryUpdate", receipt.logs);
    return registerEvent.args[0];
};
const getAddressFromReceipt = (receipt) => {
    const proxyEvent = contract_1.findEvent("ProxyCreated", receipt.logs);
    return proxyEvent.args[0];
};
//# sourceMappingURL=data:application/json;base64,
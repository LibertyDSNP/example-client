"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const hardhatRPC_1 = require("../../test/hardhatRPC");
const registry_1 = require("./registry");
const typechain_1 = require("../../types/typechain");
const sdkTestConfig_1 = require("../../test/sdkTestConfig");
const identity_1 = require("./identity");
const messages_1 = require("../messages");
const dsnpGenerators_1 = require("../../generators/dsnpGenerators");
const testAccounts_1 = require("../../test/testAccounts");
const test_generators_1 = require("@dsnp/test-generators");
describe("registry", () => {
    let signer;
    let provider;
    hardhatRPC_1.setupSnapshot();
    beforeAll(() => {
        ({ signer, provider } = sdkTestConfig_1.setupConfig());
    });
    describe("#resolveRegistration", () => {
        const handle = "registered";
        let givenId;
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.snapshotHardhat(provider);
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const transaction = yield registry_1.register(identityContract.address, handle);
            givenId = yield testAccounts_1.getIdFromRegisterTransaction(transaction);
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.revertHardhat(provider);
        }));
        it("Returns the correct id", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(givenId).toEqual("dsnp://00000000000003e8");
            const result = yield registry_1.resolveRegistration(handle);
            expect(result === null || result === void 0 ? void 0 : result.dsnpUserId).toEqual(givenId);
        }));
        it("Returns null for an unfound handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield registry_1.resolveRegistration("not-registered");
            expect(result).toBeNull();
        }));
    });
    describe("#register", () => {
        const handle = "registered";
        const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
        let idContractAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.snapshotHardhat(provider);
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            idContractAddr = identityContract.address;
            yield registry_1.register(identityContract.address, handle);
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.revertHardhat(provider);
        }));
        it("Should throw for an already registered handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const pendingTx = registry_1.register(idContractAddr, handle);
            yield expect(pendingTx).transactionRejectsWith(/Handle already exists/);
        }));
        it("returns a Contract Transaction that can be resolved into a DSNP User Id", () => __awaiter(void 0, void 0, void 0, function* () {
            const transaction = yield registry_1.register(idContractAddr, "new-handle");
            expect(yield testAccounts_1.getIdFromRegisterTransaction(transaction)).toEqual("dsnp://00000000000003e9");
        }));
    });
    describe("#changeHandle", () => {
        const handle = "registered";
        let idContractAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.snapshotHardhat(provider);
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(yield signer.getAddress());
            yield identityContract.deployed();
            idContractAddr = identityContract.address;
            yield registry_1.register(identityContract.address, handle);
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.revertHardhat(provider);
        }));
        it("Should succeed with an unregistered handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const otherHandle = "completely new";
            const pendingTx = registry_1.changeHandle(handle, otherHandle);
            yield expect(pendingTx).resolves.toBeTruthy();
        }));
        it("Should throw for the same handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const pendingTx = registry_1.changeHandle(handle, handle);
            yield expect(pendingTx).transactionRejectsWith(/New handle already exists/);
        }));
        it("Should throw for an already registered handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const otherHandle = "reg2";
            yield registry_1.register(idContractAddr, otherHandle);
            const pendingTx = registry_1.changeHandle(handle, otherHandle);
            yield expect(pendingTx).transactionRejectsWith(/New handle already exists/);
        }));
        it("returns a Contract Transaction with the DSNPRegistryUpdate Event", () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const otherHandle = "completely new";
            const contractTransaction = yield registry_1.changeHandle(handle, otherHandle);
            const receipt = yield contractTransaction.wait();
            expect(receipt.events).toHaveLength(1);
            expect((_b = (_a = receipt.events) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.event).toEqual("DSNPRegistryUpdate");
        }));
    });
    describe("#changeAddress", () => {
        const handle = "registered";
        let newIdContractAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.snapshotHardhat(provider);
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(yield signer.getAddress());
            yield identityContract.deployed();
            yield registry_1.register(identityContract.address, handle);
            const newIdentityContract = yield new typechain_1.Identity__factory(signer).deploy(yield signer.getAddress());
            yield newIdentityContract.deployed();
            newIdContractAddr = newIdentityContract.address;
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.revertHardhat(provider);
        }));
        it("Should succeed", () => __awaiter(void 0, void 0, void 0, function* () {
            const pendingTx = registry_1.changeAddress(handle, newIdContractAddr);
            yield expect(pendingTx).resolves.toBeTruthy();
        }));
        it("Should reject for a non-contract address", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const pendingTx = registry_1.changeAddress(handle, fakeAddress);
            yield expect(pendingTx).rejects.toBeTruthy();
        }));
        it("returns a Contract Transaction with the DSNPRegistryUpdate Event", () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const contractTransaction = yield registry_1.changeAddress(handle, newIdContractAddr);
            const receipt = yield contractTransaction.wait();
            expect(receipt.events).toHaveLength(1);
            expect((_b = (_a = receipt.events) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.event).toEqual("DSNPRegistryUpdate");
        }));
    });
    describe("getDSNPRegistryUpdateEvents", () => {
        it("can pull one event", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const handle = "ZebraButtons";
            const identityContractAddress = identityContract.address;
            yield registry_1.register(identityContractAddress, handle);
            const regs = yield registry_1.getDSNPRegistryUpdateEvents({
                contractAddr: identityContractAddress,
            });
            expect(regs[0].contractAddr).toEqual(identityContractAddress);
            expect(regs[0].dsnpUserId).toEqual("dsnp://0000000000000" + Number(1000).toString(16));
            expect(regs[0].handle).toEqual(handle);
        }));
        it("Does not pull other almost matching events", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const identityContract2 = yield new typechain_1.Identity__factory(signer).deploy(fakeAddress);
            yield identityContract2.deployed();
            const handle = "ZebraButtons";
            yield registry_1.register(identityContract.address, handle);
            yield registry_1.register(identityContract2.address, handle + "2");
            const regs = yield registry_1.getDSNPRegistryUpdateEvents({
                contractAddr: identityContract.address,
            });
            expect(regs).toHaveLength(1);
            expect(regs[0].contractAddr).toEqual(identityContract.address);
            expect(regs[0].handle).toEqual(handle);
        }));
        it("pulls all the related events for identityContract", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const handle = "ZebraButtons";
            const identityContractAddress = identityContract.address;
            yield registry_1.register(identityContractAddress, handle);
            yield registry_1.register(identityContractAddress, handle + "2");
            const regs = yield registry_1.getDSNPRegistryUpdateEvents({
                contractAddr: identityContractAddress,
            });
            expect(regs).toHaveLength(2);
            expect(regs[0].handle).toEqual(handle);
            expect(regs[1].handle).toEqual(handle + "2");
        }));
        it("pulls all the related events for matching ids in the correct order", () => __awaiter(void 0, void 0, void 0, function* () {
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(yield signer.getAddress());
            yield identityContract.deployed();
            const handle = "ZebraButtons";
            const identityContractAddress = identityContract.address;
            const tx = yield registry_1.register(identityContractAddress, handle);
            const id = yield testAccounts_1.getIdFromRegisterTransaction(tx);
            yield registry_1.changeHandle(handle, handle + "new");
            const regs = yield registry_1.getDSNPRegistryUpdateEvents({ dsnpUserId: id });
            expect(regs).toHaveLength(2);
            expect(regs[0].handle).toEqual(handle);
            expect(regs[1].handle).toEqual(handle + "new");
        }));
    });
    describe("validateMessage", () => {
        const msg = dsnpGenerators_1.generateBroadcast();
        const permAllowed = identity_1.Permission.ANNOUNCE;
        const permDenied = identity_1.Permission.OWNERSHIP_TRANSFER;
        let contractAddr = "";
        let sig = "";
        let dsnpUserId = "";
        let signerAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.snapshotHardhat(provider);
            signerAddr = yield signer.getAddress();
            const identityContract = yield new typechain_1.Identity__factory(signer).deploy(signerAddr);
            yield identityContract.deployed();
            contractAddr = identityContract.address;
            const tx = yield registry_1.register(contractAddr, "Animaniacs");
            dsnpUserId = yield testAccounts_1.getIdFromRegisterTransaction(tx);
            const signedMessage = yield messages_1.sign(msg);
            sig = signedMessage.signature;
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield hardhatRPC_1.revertHardhat(provider);
        }));
        it("returns true if the signer is authorized for the given permissions", () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(registry_1.isMessageSignatureAuthorizedTo(sig, msg, dsnpUserId, permAllowed)).toBeTruthy();
        }));
        it("returns false if the signer is not authorized for the given permissions", () => __awaiter(void 0, void 0, void 0, function* () {
            const regSigner = yield testAccounts_1.newRegistrationForAccountIndex(2, "Handel");
            const res = yield registry_1.isMessageSignatureAuthorizedTo(sig, msg, regSigner.dsnpUserId, permDenied);
            expect(res).toBeFalsy();
        }));
        it("returns false if signature is a real one but not for this message", () => __awaiter(void 0, void 0, void 0, function* () {
            const otherMsg = dsnpGenerators_1.generateBroadcast();
            const signedMessage = yield messages_1.sign(otherMsg);
            const badSig = signedMessage.signature;
            const res = yield registry_1.isMessageSignatureAuthorizedTo(badSig, msg, dsnpUserId, permAllowed);
            expect(res).toBeFalsy();
        }));
        describe("valid block tag =", () => {
            [
                { name: "latest", value: "latest", expected: true },
                { name: "earliest", value: "earliest", expected: true },
                { name: "pending", value: "pending", expected: true },
                { name: "negative number", value: -1, expected: true },
                { name: "positive number", value: 1, expected: true },
                { name: "0x0", value: 0x0, expected: true },
                { name: "0x1", value: 0x1, expected: true },
            ].forEach((tc) => {
                it(`${tc.name} returns ${tc.expected}`, () => __awaiter(void 0, void 0, void 0, function* () {
                    const actual = yield registry_1.isMessageSignatureAuthorizedTo(sig, msg, dsnpUserId, permAllowed, 1);
                    expect(actual).toEqual(tc.expected);
                }));
            });
        });
        it("throws if id cannot be resolved", () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(registry_1.isMessageSignatureAuthorizedTo("0xdeadbeef", msg, "0xabcd1234", permAllowed)).rejects.toThrow("Contract was not found");
        }));
        it("throws if signature is garbage", () => __awaiter(void 0, void 0, void 0, function* () {
            const badSig = test_generators_1.generateHexString(65);
            yield expect(registry_1.isMessageSignatureAuthorizedTo(badSig, msg, dsnpUserId, permAllowed)).rejects.toThrow(/signature missing v and recoveryParam/);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_sha3_1 = require("js-sha3");
const publisher_1 = require("./publisher");
const subscription_1 = require("./subscription");
const sdkTestConfig_1 = require("../../test/sdkTestConfig");
const hardhatRPC_1 = require("../../test/hardhatRPC");
const config_1 = require("../../config");
const utilities_1 = require("../../test/utilities");
describe("subscription", () => {
    hardhatRPC_1.setupSnapshot();
    beforeEach(() => {
        sdkTestConfig_1.setupConfig();
    });
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        jest.resetAllMocks();
    }));
    describe("subscribeToBatchPublications", () => {
        jest.setTimeout(70000);
        const testUrl = "http://www.testconst.com";
        const hash = "0x" + js_sha3_1.keccak256("test");
        it("listen and retrieve batch publication events", () => __awaiter(void 0, void 0, void 0, function* () {
            const provider = config_1.requireGetProvider();
            const mock = jest.fn();
            const removeListener = yield subscription_1.subscribeToBatchPublications(mock);
            const publications = [{ dsnpType: 2, url: testUrl, hash: hash }];
            yield (yield publisher_1.publish(publications)).wait(1);
            const numberOfCalls = yield utilities_1.checkNumberOfFunctionCalls(mock, 30, 1);
            const filter = yield publisher_1.dsnpBatchFilter();
            expect(numberOfCalls).toBeTruthy();
            expect(mock.mock.calls[0][0].dsnpType).toEqual(2);
            expect(mock.mock.calls[0][0].dsnpUrl).toEqual(testUrl);
            expect(mock.mock.calls[0][0].dsnpHash).toEqual(hash);
            yield removeListener();
            expect(provider.listeners(filter).length).toEqual(0);
        }));
        it("calls the callback on each event", () => __awaiter(void 0, void 0, void 0, function* () {
            const provider = config_1.requireGetProvider();
            const testUrl1 = "http://www.testconst111.com";
            const hash1 = "0x" + js_sha3_1.keccak256("test111");
            const testUrl2 = "http://www.testconst222.com";
            const hash2 = "0x" + js_sha3_1.keccak256("test222");
            const mock = jest.fn();
            const removeListener = yield subscription_1.subscribeToBatchPublications(mock);
            const publications = [{ dsnpType: 2, url: testUrl1, hash: hash1 }];
            const publications1 = [{ dsnpType: 2, url: testUrl2, hash: hash2 }];
            yield (yield publisher_1.publish(publications)).wait(1);
            yield (yield publisher_1.publish(publications1)).wait(1);
            const numberOfCalls = yield utilities_1.checkNumberOfFunctionCalls(mock, 10, 2);
            expect(numberOfCalls).toBeTruthy();
            expect(mock).toHaveBeenCalledTimes(2);
            yield removeListener();
            const filter = yield publisher_1.dsnpBatchFilter();
            expect(provider.listeners(filter).length).toEqual(0);
        }));
        describe("when listener is removed", () => {
            it("does not retrieve events", () => __awaiter(void 0, void 0, void 0, function* () {
                const provider = config_1.requireGetProvider();
                const filter = yield publisher_1.dsnpBatchFilter();
                const mock1 = jest.fn();
                const removeListener = yield subscription_1.subscribeToBatchPublications(mock1);
                expect(provider.listeners(filter).length).toEqual(1);
                yield removeListener();
                expect(provider.listeners(filter).length).toEqual(0);
            }));
        });
    });
    describe("BatchPublication events with custom filter", () => {
        it("returns events that matches filters", () => __awaiter(void 0, void 0, void 0, function* () {
            const provider = config_1.requireGetProvider();
            const mock = jest.fn((opts) => {
                return opts;
            });
            const testUrl3 = "http://www.testconst333.com";
            const hash3 = "0x" + js_sha3_1.keccak256("test333");
            const testUrl4 = "http://www.testconst333.com";
            const hash4 = "0x" + js_sha3_1.keccak256("test333");
            const removeListener = yield subscription_1.subscribeToBatchPublications(mock, { dsnpType: 2 });
            const publications = [{ dsnpType: 2, url: testUrl3, hash: hash3 }];
            const publications1 = [{ dsnpType: 4, url: testUrl4, hash: hash4 }];
            yield (yield publisher_1.publish(publications)).wait(1);
            yield (yield publisher_1.publish(publications1)).wait(1);
            yield utilities_1.checkNumberOfFunctionCalls(mock, 10, 1);
            const filter = yield publisher_1.dsnpBatchFilter();
            expect(mock).toHaveBeenCalledTimes(1);
            expect(mock.mock.calls[0][0].dsnpType).toEqual(2);
            expect(mock.mock.calls[0][0].dsnpUrl).toEqual(testUrl3);
            expect(mock.mock.calls[0][0].dsnpHash).toEqual(hash3);
            yield removeListener();
            expect(provider.listeners(filter).length).toEqual(0);
        }));
    });
    describe("get past events from start block", () => {
        it("retrieves past events based on given start block", () => __awaiter(void 0, void 0, void 0, function* () {
            const provider = config_1.requireGetProvider();
            const mock = jest.fn();
            const testUrl3 = "http://www.testconst333.com";
            const hash3 = "0x" + js_sha3_1.keccak256("test333");
            const testUrl4 = "http://www.testconst444.com";
            const hash4 = "0x" + js_sha3_1.keccak256("test444");
            const testUrl5 = "http://www.testconst555.com";
            const hash5 = "0x" + js_sha3_1.keccak256("test555");
            const testUrl6 = "http://www.testconst666.com";
            const hash6 = "0x" + js_sha3_1.keccak256("test666");
            const publications = [{ dsnpType: 2, url: testUrl3, hash: hash3 }];
            const publications1 = [{ dsnpType: 2, url: testUrl4, hash: hash4 }];
            const publications2 = [{ dsnpType: 2, url: testUrl5, hash: hash5 }];
            const publications3 = [{ dsnpType: 2, url: testUrl6, hash: hash6 }];
            yield (yield publisher_1.publish(publications)).wait(1);
            const blockNumber = (yield provider.getBlockNumber()) + 1;
            yield (yield publisher_1.publish(publications1)).wait(1);
            const removeListener = yield subscription_1.subscribeToBatchPublications(mock, { dsnpType: 2, fromBlock: blockNumber });
            yield (yield publisher_1.publish(publications2)).wait(1);
            yield (yield publisher_1.publish(publications3)).wait(1);
            yield utilities_1.checkNumberOfFunctionCalls(mock, 10, 3);
            expect(mock).toHaveBeenCalledTimes(3);
            expect(mock.mock.calls[0][0]).toEqual(expect.objectContaining({
                dsnpUrl: publications1[0].url,
                dsnpHash: publications1[0].hash,
                dsnpType: publications1[0].dsnpType,
            }));
            expect(mock.mock.calls[1][0]).toEqual(expect.objectContaining({
                dsnpUrl: publications2[0].url,
                dsnpHash: publications2[0].hash,
                dsnpType: publications2[0].dsnpType,
            }));
            expect(mock.mock.calls[2][0]).toEqual(expect.objectContaining({
                dsnpUrl: publications3[0].url,
                dsnpHash: publications3[0].hash,
                dsnpType: publications3[0].dsnpType,
            }));
            const filter = yield publisher_1.dsnpBatchFilter();
            yield removeListener();
            expect(provider.listeners(filter).length).toEqual(0);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,
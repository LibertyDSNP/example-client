"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscribeToBatchPublications = void 0;
const ethers_1 = require("ethers");
const config_1 = require("../../config");
const publisher_1 = require("./publisher");
const typechain_1 = require("../../types/typechain");
const PUBLISHER_DECODER = new ethers_1.ethers.utils.Interface(typechain_1.Publisher__factory.abi);
const subscribeToBatchPublications = (doReceivePublication, filter) => __awaiter(void 0, void 0, void 0, function* () {
    let pastLogs = [];
    const currentLogQueue = [];
    const batchFilter = yield publisher_1.dsnpBatchFilter();
    const batchFilterWithOptions = filter ? createFilter(batchFilter, filter) : batchFilter;
    const provider = config_1.requireGetProvider();
    let maxBlockNumberForPastLogs = (filter === null || filter === void 0 ? void 0 : filter.fromBlock) || 0;
    let useQueue = (filter === null || filter === void 0 ? void 0 : filter.fromBlock) != undefined;
    provider.on(batchFilterWithOptions, (log) => {
        const logItem = decodeLogsForBatchPublication([log])[0];
        if (useQueue) {
            currentLogQueue.push(logItem);
        }
        else if (logItem.blockNumber > maxBlockNumberForPastLogs) {
            doReceivePublication(logItem);
        }
    });
    if (useQueue) {
        pastLogs = yield getPastLogs(provider, { fromBlock: filter === null || filter === void 0 ? void 0 : filter.fromBlock });
        maxBlockNumberForPastLogs = pastLogs[pastLogs.length - 1].blockNumber;
        while (pastLogs.length > 0) {
            const batchItem = pastLogs.shift();
            if (batchItem)
                doReceivePublication(batchItem);
        }
        while (currentLogQueue.length > 0) {
            const batchItem = currentLogQueue.shift();
            if (batchItem && batchItem.blockNumber > maxBlockNumberForPastLogs)
                doReceivePublication(batchItem);
        }
        useQueue = false;
    }
    return () => {
        provider.off(batchFilterWithOptions);
    };
});
exports.subscribeToBatchPublications = subscribeToBatchPublications;
const createFilter = (batchFilter, filterOptions) => {
    const topics = batchFilter.topics ? batchFilter.topics : [];
    const dsnpTypeTopic = (filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.dsnpType) ? "0x" + filterOptions.dsnpType.toString(16).padStart(64, "0") : null;
    if (dsnpTypeTopic) {
        topics.push(dsnpTypeTopic);
    }
    const finalFilter = {
        topics: topics,
    };
    return finalFilter;
};
const getPastLogs = (provider, filter) => __awaiter(void 0, void 0, void 0, function* () {
    const logs = yield provider.getLogs(filter);
    return decodeLogsForBatchPublication(logs);
});
const decodeLogsForBatchPublication = (logs) => {
    return logs
        .map((log) => {
        const fragment = PUBLISHER_DECODER.parseLog(log);
        return { fragment, log: log };
    })
        .filter((desc) => desc.fragment.name === "DSNPBatchPublication")
        .map((item) => {
        return {
            dsnpType: item.fragment.args.dsnpType,
            dsnpHash: item.fragment.args.dsnpHash,
            dsnpUrl: item.fragment.args.dsnpUrl,
            blockNumber: item.log.blockNumber,
            transactionHash: item.log.transactionHash,
        };
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvY29udHJhY3RzL3N1YnNjcmlwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSxtQ0FBZ0M7QUFDaEMseUNBQWtEO0FBQ2xELDJDQUE4QztBQUU5QyxxREFBMkQ7QUFDM0QsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGVBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLDhCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBaUN0RSxNQUFNLDRCQUE0QixHQUFHLENBQzFDLG9CQUE4QyxFQUM5QyxNQUEyQixFQUNOLEVBQUU7SUFDdkIsSUFBSSxRQUFRLEdBQW1DLEVBQUUsQ0FBQztJQUNsRCxNQUFNLGVBQWUsR0FBbUMsRUFBRSxDQUFDO0lBQzNELE1BQU0sV0FBVyxHQUF1QixNQUFNLDJCQUFlLEVBQUUsQ0FBQztJQUNoRSxNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBRXhGLE1BQU0sUUFBUSxHQUFHLDJCQUFrQixFQUFFLENBQUM7SUFDdEMsSUFBSSx5QkFBeUIsR0FBRyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxTQUFTLEtBQUksQ0FBQyxDQUFDO0lBQ3ZELElBQUksUUFBUSxHQUFHLENBQUEsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFNBQVMsS0FBSSxTQUFTLENBQUM7SUFFOUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEdBQXlCLEVBQUUsRUFBRTtRQUNoRSxNQUFNLE9BQU8sR0FBRyw2QkFBNkIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEQsSUFBSSxRQUFRLEVBQUU7WUFD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
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findEvent = exports.parseLogs = exports.getVmError = exports.getContractAddress = exports.DSNP_MIGRATION_ABI = exports.getKeccakTopic = void 0;
const js_sha3_1 = require("js-sha3");
const types = __importStar(require("../../types/typechain"));
const ethers_1 = require("ethers");
const DSNP_MIGRATION_TYPE = "DSNPMigration(address,string)";
const getKeccakTopic = (topic) => "0x" + js_sha3_1.keccak256(topic);
exports.getKeccakTopic = getKeccakTopic;
const EVENTS_ABI = new ethers_1.ethers.utils.Interface([
    types.Publisher__factory,
    types.BeaconFactory__factory,
    types.Identity__factory,
    types.Migrations__factory,
    types.Registry__factory,
]
    .reduce((m, f) => m.concat(f.abi), [])
    .filter((ef) => ef.type === "event"));
exports.DSNP_MIGRATION_ABI = [
    ethers_1.ethers.utils.ParamType.fromObject({
        indexed: false,
        baseType: "address",
        name: "contractAddr",
        type: "address",
    }),
    ethers_1.ethers.utils.ParamType.fromObject({
        indexed: false,
        baseType: "string",
        name: "contractName",
        type: "string",
    }),
];
const decodeReturnValues = (inputs, logs) => {
    const decoder = new ethers_1.ethers.utils.AbiCoder();
    return logs.map((log) => {
        const { contractAddr, contractName } = decoder.decode(inputs, log.data);
        return {
            contractAddr: contractAddr,
            contractName: contractName,
            blockNumber: log.blockNumber,
            blockHash: log.blockHash,
        };
    });
};
const filterValues = (values, contractName) => {
    return values.filter((result) => {
        return result.contractName == contractName;
    });
};
const getContractAddress = (provider, contractName) => __awaiter(void 0, void 0, void 0, function* () {
    const topic = exports.getKeccakTopic(DSNP_MIGRATION_TYPE);
    const logs = yield provider.getLogs({
        topics: [topic],
        fromBlock: 0,
    });
    const decodedValues = decodeReturnValues(exports.DSNP_MIGRATION_ABI, logs);
    const filteredResults = filterValues(decodedValues, contractName);
    return filteredResults.length > 0 ? filteredResults[filteredResults.length - 1].contractAddr : null;
});
exports.getContractAddress = getContractAddress;
const getVmError = (e) => {
    var _a, _b, _c;
    try {
        if (e.body) {
            const parsed = JSON.parse(e.body);
            return (_a = parsed === null || parsed === void 0 ? void 0 : parsed.error) === null || _a === void 0 ? void 0 : _a.message;
        }
        if ((_b = e.error) === null || _b === void 0 ? void 0 : _b.body) {
            const parsed = JSON.parse(e.error.body);
            return (_c = parsed === null || parsed === void 0 ? void 0 : parsed.error) === null || _c === void 0 ? void 0 : _c.message;
        }
    }
    catch (e) {
        return undefined;
    }
    return undefined;
};
exports.getVmError = getVmError;
const parseLogs = (logs) => {
    return logs.map((log) => EVENTS_ABI.parseLog(log));
};
exports.parseLogs = parseLogs;
const findEvent = (name, logs) => {
    const event = exports.parseLogs(logs).find((e) => e.name === name);
    if (event === undefined) {
        throw `no ${name} logs found`;
    }
    return event;
};
exports.findEvent = findEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9jb250cmFjdHMvY29udHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHFDQUFvQztBQUNwQyw2REFBK0M7QUFDL0MsbUNBQWdDO0FBR2hDLE1BQU0sbUJBQW1CLEdBQUcsK0JBQStCLENBQUM7QUFFckQsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUFhLEVBQWEsRUFBRSxDQUFDLElBQUksR0FBRyxtQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQXZFLFFBQUEsY0FBYyxrQkFBeUQ7QUFJcEYsTUFBTSxVQUFVLEdBQUcsSUFBSSxlQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FDM0M7SUFDRSxLQUFLLENBQUMsa0JBQWtCO0lBQ3hCLEtBQUssQ0FBQyxzQkFBc0I7SUFDNUIsS0FBSyxDQUFDLGlCQUFpQjtJQUN2QixLQUFLLENBQUMsbUJBQW1CO0lBQ3pCLEtBQUssQ0FBQyxpQkFBaUI7Q0FDeEI7S0FFRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUEwQixDQUFDLEVBQUUsRUFBeUIsQ0FBQztLQUNuRixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUF3QixDQUM5RCxDQUFDO0FBZ0JXLFFBQUEsa0JBQWtCLEdBQTZCO0lBQzFELGVBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUNoQyxPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxTQUFTO1FBQ25CLElBQUksRUFBRSxjQUFjO1FBQ3BCLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUM7SUFDRixlQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMs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
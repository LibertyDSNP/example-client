"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dsnpBatchFilter = exports.publish = void 0;
const config_1 = require("../../config");
const typechain_1 = require("../../types/typechain");
const contract_1 = require("./contract");
const CONTRACT_NAME = "Publisher";
const publish = (publications) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getPublisherContract();
    return contract.publish(publications);
});
exports.publish = publish;
const dsnpBatchFilter = () => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getPublisherContract();
    return contract.filters.DSNPBatchPublication();
});
exports.dsnpBatchFilter = dsnpBatchFilter;
const getPublisherContract = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { publisher } = config_1.getContracts(opts);
    const signer = config_1.requireGetSigner(opts);
    const provider = config_1.requireGetProvider(opts);
    const address = publisher || (yield contract_1.getContractAddress(provider, CONTRACT_NAME));
    if (!address)
        throw config_1.MissingContract;
    return typechain_1.Publisher__factory.connect(address, signer);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvY29udHJhY3RzL3B1Ymxpc2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSx5Q0FBK0c7QUFFL0cscURBQXNFO0FBQ3RFLHlDQUFnRDtBQUVoRCxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUM7QUFlM0IsTUFBTSxPQUFPLEdBQUcsQ0FBTyxZQUEyQixFQUFnQyxFQUFFO0lBQ3pGLE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLEVBQUUsQ0FBQztJQUM5QyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDeEMsQ0FBQyxDQUFBLENBQUM7QUFIVyxRQUFBLE9BQU8sV0FHbEI7QUFPSyxNQUFNLGVBQWUsR0FBRyxHQUErQixFQUFFO0lBQzlELE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLEVBQUUsQ0FBQztJQUM5QyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUNqRCxDQUFDLENBQUEsQ0FBQztBQUhXLFFBQUEsZUFBZSxtQkFHMUI7QUFFRixNQUFNLG9CQUFvQixHQUFHLENBQU8sSUFBaUIsRUFBc0IsRUFBRTtJQUMzRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcscUJBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxNQUFNLE1BQU0sR0FBRyx5QkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxNQUFNLFFBQVEsR0FBRywyQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxQyxNQUFNLE9BQU8sR0FBRyxTQUFTLElBQUksQ0FBQyxNQUFNLDZCQUFrQixDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBRWpGLElBQUksQ0FBQyxPQUFPO1FBQUUsTUFBTSx3QkFBZSxDQUFDO0lBQ3BDLE9BQU8sOEJBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUEsQ0FBQyJ9
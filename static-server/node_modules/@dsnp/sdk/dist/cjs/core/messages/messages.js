"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recoverPublicKey = exports.sign = exports.createProfileMessage = exports.serialize = exports.createUnfollowGraphChangeMessage = exports.createFollowGraphChangeMessage = exports.DSNPGraphChangeType = exports.createReactionMessage = exports.createReplyMessage = exports.createBroadcastMessage = exports.DSNPType = void 0;
const ethers_1 = require("ethers");
const config_1 = require("../../config");
const json_1 = require("../utilities/json");
var DSNPType;
(function (DSNPType) {
    DSNPType[DSNPType["GraphChange"] = 1] = "GraphChange";
    DSNPType[DSNPType["Broadcast"] = 2] = "Broadcast";
    DSNPType[DSNPType["Reply"] = 3] = "Reply";
    DSNPType[DSNPType["Reaction"] = 4] = "Reaction";
    DSNPType[DSNPType["Profile"] = 5] = "Profile";
})(DSNPType = exports.DSNPType || (exports.DSNPType = {}));
const createBroadcastMessage = (fromId, url, hash) => ({
    dsnpType: DSNPType.Broadcast,
    contentHash: hash,
    fromId,
    url,
});
exports.createBroadcastMessage = createBroadcastMessage;
const createReplyMessage = (fromId, url, hash, inReplyTo) => ({
    dsnpType: DSNPType.Reply,
    contentHash: hash,
    fromId,
    inReplyTo,
    url,
});
exports.createReplyMessage = createReplyMessage;
const createReactionMessage = (fromId, emoji, inReplyTo) => ({
    dsnpType: DSNPType.Reaction,
    emoji,
    fromId,
    inReplyTo,
});
exports.createReactionMessage = createReactionMessage;
var DSNPGraphChangeType;
(function (DSNPGraphChangeType) {
    DSNPGraphChangeType[DSNPGraphChangeType["Follow"] = 1] = "Follow";
    DSNPGraphChangeType[DSNPGraphChangeType["Unfollow"] = 2] = "Unfollow";
})(DSNPGraphChangeType = exports.DSNPGraphChangeType || (exports.DSNPGraphChangeType = {}));
const createFollowGraphChangeMessage = (fromId, followeeId) => ({
    fromId,
    dsnpType: DSNPType.GraphChange,
    changeType: DSNPGraphChangeType.Follow,
    objectId: followeeId,
});
exports.createFollowGraphChangeMessage = createFollowGraphChangeMessage;
const createUnfollowGraphChangeMessage = (fromId, followeeId) => ({
    fromId,
    dsnpType: DSNPType.GraphChange,
    changeType: DSNPGraphChangeType.Unfollow,
    objectId: followeeId,
});
exports.createUnfollowGraphChangeMessage = createUnfollowGraphChangeMessage;
const serialize = (message) => {
    const sortedMessage = json_1.sortObject(message);
    let serialization = "";
    for (const key in sortedMessage) {
        serialization = `${serialization}${key}${sortedMessage[key]}`;
    }
    return serialization;
};
exports.serialize = serialize;
const createProfileMessage = (fromId, url, hash) => ({
    dsnpType: DSNPType.Profile,
    contentHash: hash,
    fromId,
    url,
});
exports.createProfileMessage = createProfileMessage;
const sign = (message, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const signer = config_1.requireGetSigner(opts);
    const signature = yield signer.signMessage(exports.serialize(message));
    return Object.assign(Object.assign({}, message), { signature });
});
exports.sign = sign;
const recoverPublicKey = (message, signature) => {
    return ethers_1.ethers.utils.verifyMessage(exports.serialize(message), signature);
};
exports.recoverPublicKey = recoverPublicKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9tZXNzYWdlcy9tZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBZ0M7QUFFaEMseUNBQTREO0FBRTVELDRDQUErQztBQU0vQyxJQUFZLFFBTVg7QUFORCxXQUFZLFFBQVE7SUFDbEIscURBQWUsQ0FBQTtJQUNmLGlEQUFhLENBQUE7SUFDYix5Q0FBUyxDQUFBO0lBQ1QsK0NBQVksQ0FBQTtJQUNaLDZDQUFXLENBQUE7QUFDYixDQUFDLEVBTlcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFNbkI7QUFnQ00sTUFBTSxzQkFBc0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUUsSUFBZSxFQUFvQixFQUFFLENBQUMsQ0FBQztJQUN6RyxRQUFRLEVBQUUsUUFBUSxDQUFDLFNBQVM7SUFDNUIsV0FBVyxFQUFFLElBQUk7SUFDakIsTUFBTTtJQUNOLEdBQUc7Q0FDSixDQUFDLENBQUM7QUFMVSxRQUFBLHNCQUFzQiwwQkFLaEM7QUFzQkksTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUUsSUFBZSxFQUFFLFNBQWlCLEVBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BILFFBQVEsRUFBRSxRQUFRLENBQUMsS0FBSztJQUN4QixXQUFXLEVBQUUsSUFBSTtJQUNqQixNQUFNO0lBQ04sU0FBUztJQUNULEdBQUc7Q0FDSixDQUFDLENBQUM7QUFOVSxRQUFBLGtCQUFrQixzQkFNNUI7QUFvQkksTUFBTSxxQkFBcUIsR0FBRyxDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsU0FBaUIsRUFBbUIsRUFBRSxDQUFDLENBQUM7SUFDM0csUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO0lBQzNCLEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztDQUNWLENBQUMsQ0FBQztBQUxVLFFBQUEscUJBQXFCLHlCQUsvQjtBQUtILElBQVksbUJBR1g7QUFIRCxXQUFZLG1CQUFtQjtJQUM3QixpRUFBVSxDQUFBO0lBQ1YscUVBQVksQ0FBQTtBQUNkLENBQUMsRUFIVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQUc5QjtBQW1CTSxNQUFNLDhCQUE4QixHQUFHLENBQUMsTUFBYyxFQUFFLFVBQWtCLEVBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLE1BQU07SUFDTixRQUFRLEVBQUUsUUFBUSxDQUFDLFdBQVc7SUFDOUIsVUFBVSxFQUFFLG1CQUFtQixDQUFDLE1BQU07SUFDdEMsUUFBUSxFQUFFLFVBQVU7Q0FDckIsQ0FBQyxDQUFDO0FBTFUsUUFBQSw4QkFBOEIsa0NBS3hDO0FBVUksTUFBTSxnQ0FBZ0MsR0FBRyxDQUFDLE1BQWMsRUFBRSxVQUFrQixFQUFzQixFQUFFLENBQUMsQ0FBQztJQUMzRyxNQUFNO0lBQ04sUUFBUSxFQUFFLFFBQVEsQ0FBQyxXQUFXO0lBQzlCLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxRQUFRO0lBQ3hDLFFBQVEsRUFBRSxVQUFVO0NBQ3JCLENBQUMsQ0FBQztBQUxVLFFBQUEsZ0NBQWdDLG9DQUsxQztBQVFJLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBb0IsRUFBVSxFQUFFO0lBQ3hELE1BQU0sYUFBYSxHQUFHLGlCQUFVLENBQUUsT0FBOEMsQ0FBQyxDQUFDO0lBQ2xGLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUV2QixLQUFLLE1BQU0sR0FBRyxJQUFJLGFBQWEsRUFBRTtRQUMvQixhQUFhLEdBQUcsR0FBRyxhQUFhLEdBQUcsR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0tBQy9EO0lBRUQsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBVFcsUUFBQSxTQUFTLGFBU3BCO0FBbUJLLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxNQUFjLEVBQUUsR0FBVyxFQUFFLElBQWUsRUFBa0IsRUFBRSxDQUFDLENBQUM7SUFDckcsUUFBUSxFQUFFLFFBQVEsQ0FBQyxPQUFPO0lBQzFCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLE1BQU07SUFDTixHQUFHO0NBQ0osQ0FBQyxDQUFDO0FBTFUsUUFBQSxvQkFBb0Isd0JBSzlCO0FBWUksTUFBTSxJQUFJLEdBQUcsQ0FBOEIsT0FBVSxFQUFFLElBQWlCLEVBQWlDLEVBQUU7SUFDaEgsTUFBTSxNQUFNLEdBQUcseUJBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMvRCx1Q0FDSyxPQUFPLEtBQ1YsU0FBUyxJQUNUO0FBQ0osQ0FBQyxDQUFBLENBQUM7QUFQVyxRQUFBLElBQUksUUFPZjtBQVVLLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxPQUFvQixFQUFFLFNBQW9CLEVBQWEsRUFBRTtJQUN4RixPQUFPLGVBQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGlCQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDO0FBRlcsUUFBQSxnQkFBZ0Isb0JBRTNCIn0=
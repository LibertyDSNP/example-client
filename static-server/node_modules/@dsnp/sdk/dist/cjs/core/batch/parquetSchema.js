"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBloomFilterOptionsFor = exports.getSchemaFor = exports.ReactionBloomFilterOptions = exports.ReactionSchema = exports.ProfileBloomFilterOptions = exports.ProfileSchema = exports.GraphChangeBloomFilterOptions = exports.GraphChangeSchema = exports.ReplyBloomFilterOptions = exports.ReplySchema = exports.BroadcastBloomFilterOptions = exports.BroadcastSchema = void 0;
const messages_1 = require("../messages/messages");
exports.BroadcastSchema = {
    dsnpType: { type: "INT32" },
    contentHash: { type: "BYTE_ARRAY" },
    fromId: { type: "BYTE_ARRAY" },
    url: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
exports.BroadcastBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }],
};
exports.ReplySchema = {
    dsnpType: { type: "INT32" },
    contentHash: { type: "BYTE_ARRAY" },
    fromId: { type: "BYTE_ARRAY" },
    inReplyTo: { type: "BYTE_ARRAY" },
    url: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
exports.ReplyBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }, { column: "inReplyTo" }],
};
exports.GraphChangeSchema = {
    dsnpType: { type: "INT32" },
    fromId: { type: "BYTE_ARRAY" },
    changeType: { type: "INT32" },
    signature: { type: "BYTE_ARRAY" },
};
exports.GraphChangeBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }],
};
exports.ProfileSchema = {
    dsnpType: { type: "INT32" },
    fromId: { type: "BYTE_ARRAY" },
    url: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
exports.ProfileBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }],
};
exports.ReactionSchema = {
    dsnpType: { type: "INT32" },
    emoji: { type: "BYTE_ARRAY" },
    fromId: { type: "BYTE_ARRAY" },
    inReplyTo: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
exports.ReactionBloomFilterOptions = {
    bloomFilters: [{ column: "emoji" }, { column: "fromId" }, { column: "inReplyTo" }],
};
const getSchemaFor = (dsnpType) => {
    switch (dsnpType) {
        case messages_1.DSNPType.GraphChange:
            return exports.GraphChangeSchema;
        case messages_1.DSNPType.Broadcast:
            return exports.BroadcastSchema;
        case messages_1.DSNPType.Reply:
            return exports.ReplySchema;
        case messages_1.DSNPType.Reaction:
            return exports.ReactionSchema;
        case messages_1.DSNPType.Profile:
            return exports.ProfileSchema;
    }
    throw new Error(`Invalid DSNP type: ${dsnpType}`);
};
exports.getSchemaFor = getSchemaFor;
const getBloomFilterOptionsFor = (dsnpType) => {
    switch (dsnpType) {
        case messages_1.DSNPType.GraphChange:
            return exports.GraphChangeBloomFilterOptions;
        case messages_1.DSNPType.Broadcast:
            return exports.BroadcastBloomFilterOptions;
        case messages_1.DSNPType.Reply:
            return exports.ReplyBloomFilterOptions;
        case messages_1.DSNPType.Reaction:
            return exports.ReactionBloomFilterOptions;
        case messages_1.DSNPType.Profile:
            return exports.ProfileBloomFilterOptions;
    }
    throw new Error(`Invalid DSNP type: ${dsnpType}`);
};
exports.getBloomFilterOptionsFor = getBloomFilterOptionsFor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFycXVldFNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2JhdGNoL3BhcnF1ZXRTY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0EsbURBQWdEO0FBMEJuQyxRQUFBLGVBQWUsR0FBRztJQUM3QixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0lBQzNCLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDbkMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtJQUM5QixHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFO0lBQzNCLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7Q0FDbEMsQ0FBQztBQUtXLFFBQUEsMkJBQTJCLEdBQXVCO0lBQzdELFlBQVksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDO0NBQ3JDLENBQUM7QUFLVyxRQUFBLFdBQVcsR0FBRztJQUN6QixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0lBQzNCLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDbkMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtJQUM5QixTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFO0lBQ2pDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDM0IsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtDQUNsQyxDQUFDO0FBS1csUUFBQSx1QkFBdUIsR0FBRztJQUNyQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQztDQUM5RCxDQUFDO0FBTVcsUUFBQSxpQkFBaUIsR0FBRztJQUMvQixRQUFRLEVB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
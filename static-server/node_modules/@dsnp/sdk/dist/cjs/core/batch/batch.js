"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.includes = exports.readFile = exports.openFile = exports.openURL = exports.writeBatch = exports.createFile = void 0;
const parquetjs_1 = require("@dsnp/parquetjs");
const js_sha3_1 = require("js-sha3");
const config_1 = require("../../config");
const parquetSchema_1 = require("./parquetSchema");
const utilities_1 = require("../utilities");
const createFile = (targetPath, messages, opts) => { var messages_1, messages_1_1; return __awaiter(void 0, void 0, void 0, function* () {
    var e_1, _a;
    let dsnpType;
    try {
        for (messages_1 = __asyncValues(messages); messages_1_1 = yield messages_1.next(), !messages_1_1.done;) {
            const message = messages_1_1.value;
            dsnpType = message.dsnpType;
            break;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) yield _a.call(messages_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (dsnpType === undefined)
        throw new utilities_1.EmptyBatchError();
    const schema = new parquetjs_1.ParquetSchema(parquetSchema_1.getSchemaFor(dsnpType));
    const bloomFilterOptions = parquetSchema_1.getBloomFilterOptionsFor(dsnpType);
    const store = config_1.requireGetStore(opts);
    const hashGenerator = js_sha3_1.keccak256.create();
    const url = yield store.putStream(targetPath, (writeStream) => __awaiter(void 0, void 0, void 0, function* () {
        const hashingWriteStream = Object.assign(Object.assign({}, writeStream), { write: (chunk, ...args) => {
                hashGenerator.update(chunk);
                return writeStream.write(chunk, ...args);
            }, end: () => { return writeStream.end() } });
            console.log("sup")
            // writeStream.end("end of hlelo");
        yield exports.writeBatch(hashingWriteStream, schema, messages, bloomFilterOptions);
    }));
    return {
        url,
        hash: hashGenerator.hex(),
    };
}); };
exports.createFile = createFile;
const writeBatch = (writeStream, schema, messages, opts) => { var messages_2, messages_2_1; return __awaiter(void 0, void 0, void 0, function* () {
    var e_2, _a;
    const writer = yield parquetjs_1.ParquetWriter.openStream(schema, writeStream, opts);
    let firstDsnpType;
    try {
        for (messages_2 = __asyncValues(messages); messages_2_1 = yield messages_2.next(), !messages_2_1.done;) {
            const message = messages_2_1.value;
            if (firstDsnpType === undefined)
                firstDsnpType = message.dsnpType;
            if (message.dsnpType != firstDsnpType)
                throw new utilities_1.MixedTypeBatchError(writeStream);
            yield writer.appendRow(message);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (messages_2_1 && !messages_2_1.done && (_a = messages_2.return)) yield _a.call(messages_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    if (firstDsnpType === undefined)
        throw new utilities_1.EmptyBatchError(writeStream);
    yield writer.close();
}); };
exports.writeBatch = writeBatch;
const openURL = (url) => __awaiter(void 0, void 0, void 0, function* () { return parquetjs_1.ParquetReader.openUrl(url); });
exports.openURL = openURL;
const openFile = (path) => __awaiter(void 0, void 0, void 0, function* () { return parquetjs_1.ParquetReader.openFile(path); });
exports.openFile = openFile;
const readFile = (reader, doReadRow) => __awaiter(void 0, void 0, void 0, function* () {
    const cursor = reader.getCursor();
    let record = null;
    while ((record = yield cursor.next())) {
        doReadRow(record);
    }
    return reader.close();
});
exports.readFile = readFile;
const includes = (reader, column, item) => __awaiter(void 0, void 0, void 0, function* () {
    const bloomFilterData = yield reader.getBloomFilters([column]);
    return (bloomFilterData[column] || []).some((data) => data.sbbf.check(item));
});
exports.includes = includes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9iYXRjaC9iYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQThFO0FBQzlFLHFDQUFvQztBQUdwQyx5Q0FBMkQ7QUFFM0QsbURBQXFHO0FBR3JHLDRDQUF5RjtBQWdDbEYsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsVUFBa0IsRUFDbEIsUUFBMEIsRUFDMUIsSUFBaUIsRUFDTyxFQUFFOztJQUMxQixJQUFJLFFBQVEsQ0FBQzs7UUFFYixLQUE0QixhQUFBLGNBQUEsUUFBUSxDQUFBO1lBQXpCLE1BQU0sT0FBTyxxQkFBQSxDQUFBO1lBQ3RCLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQzVCLE1BQU07U0FDUDs7Ozs7Ozs7O0lBRUQsSUFBSSxRQUFRLEtBQUssU0FBUztRQUFFLE1BQU0sSUFBSSwyQkFBZSxFQUFFLENBQUM7SUFFeEQsTUFBTSxNQUFNLEdBQUcsSUFBSSx5QkFBYSxDQUFDLDRCQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN6RCxNQUFNLGtCQUFrQixHQUFHLHdDQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTlELE1BQU0sS0FBSyxHQUFHLHdCQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsTUFBTSxhQUFhLEdBQUcsbUJBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQU8sV0FBd0IsRUFBRSxFQUFFO1FBQy9FLE1BQU0sa0JBQWtCLG1DQUNuQixXQUFXLEtBQ2QsS0FBSyxFQUFFLENBQUMsS0FBaUIsRUFBRSxHQUFHLElBQWUsRUFBVyxFQUFFO2dCQUN4RCxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUU1QixPQUFPLFdBQVcsQ0FB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
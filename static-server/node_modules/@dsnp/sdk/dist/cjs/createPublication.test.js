"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config = __importStar(require("./config"));
const messages_1 = require("./core/messages");
const createPublication_1 = require("./createPublication");
const testStore_1 = __importDefault(require("./test/testStore"));
const utilities_1 = require("./core/utilities");
describe("createPublication", () => {
    let store;
    const messages = [
        messages_1.createBroadcastMessage("dsnp://0123456789ABCDEF", "https://dsnp.org", "0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
    ];
    beforeEach(() => {
        jest.setTimeout(12000);
        store = new testStore_1.default();
        config.setConfig({
            currentFromId: "dsnp://0123456789ABCDEF",
            signer: new ethers_1.ethers.Wallet("0xd98d551044eb9ef4c9a2afd1d9c95646e22b710da55c8dc95431038d5544d804"),
            store: store,
        });
    });
    describe("when passed a valid message iterator", () => {
        it("returns an publications for the passed in messages", () => __awaiter(void 0, void 0, void 0, function* () {
            const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield messages_1.sign(msg); })));
            const publications = yield createPublication_1.createPublication(signedMessages);
            expect(publications).toMatchObject({
                dsnpType: 2,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            });
        }));
        it("stores the messages provided at the returned URL", () => __awaiter(void 0, void 0, void 0, function* () {
            const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield messages_1.sign(msg); })));
            const publication = yield createPublication_1.createPublication(signedMessages);
            const filename = publication.url.split(".org/")[1];
            const files = store.getStore();
            expect(files[filename].toString()).toMatchSnapshot();
        }));
    });
    describe("when passed a message iterator containing no messages", () => {
        const badMessages = [];
        it("throws MixedDSNPTypeError", () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(createPublication_1.createPublication(badMessages)).rejects.toBeInstanceOf(utilities_1.EmptyBatchError);
        }));
    });
});
describe("createPublications", () => {
    let store;
    const messages = [
        messages_1.createBroadcastMessage("dsnp://0123456789ABCDEF", "https://dsnp.org", "0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        messages_1.createBroadcastMessage("dsnp://0123456789ABCDE0", "https://dsnp.org", "0x1123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        messages_1.createReplyMessage("dsnp://0123456789ABCDEF", "https://dsnp.org", "0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF", "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        messages_1.createReactionMessage("dsnp://0123456789ABCDEF", "🏳️‍🌈", "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        messages_1.createReactionMessage("dsnp://0123456789ABCDEF", "🏳️‍🌈", "dsnp://0123456789ABCDE0/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
    ];
    beforeEach(() => {
        jest.setTimeout(12000);
        store = new testStore_1.default();
        config.setConfig({
            currentFromId: "dsnp://0123456789ABCDEF",
            signer: new ethers_1.ethers.Wallet("0xd98d551044eb9ef4c9a2afd1d9c95646e22b710da55c8dc95431038d5544d804"),
            store: store,
        });
    });
    it("returns an array of valid publications for each message type", () => __awaiter(void 0, void 0, void 0, function* () {
        const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield messages_1.sign(msg); })));
        const publications = yield createPublication_1.createPublications(signedMessages);
        expect(publications).toMatchObject([
            {
                dsnpType: 2,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            },
            {
                dsnpType: 3,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            },
            {
                dsnpType: 4,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            },
        ]);
    }));
    it("stores the messages provided at the returned URL", () => __awaiter(void 0, void 0, void 0, function* () {
        const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield messages_1.sign(msg); })));
        const publications = yield createPublication_1.createPublications(signedMessages);
        for (const publication of publications) {
            const filename = publication.url.split(".org/")[1];
            const files = store.getStore();
            expect(files[filename].toString()).toMatchSnapshot();
        }
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUHVibGljYXRpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jcmVhdGVQdWJsaWNhdGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1DQUFnQztBQUVoQyxpREFBbUM7QUFFbkMsOENBQTBHO0FBQzFHLDJEQUE0RTtBQUM1RSxpRUFBeUM7QUFDekMsZ0RBQW1EO0FBRW5ELFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsSUFBSSxLQUFnQixDQUFDO0lBQ3JCLE1BQU0sUUFBUSxHQUFHO1FBQ2YsaUNBQXNCLENBQ3BCLHlCQUF5QixFQUN6QixrQkFBa0IsRUFDbEIsb1FBQW9RLENBQ3JRO0tBQ0YsQ0FBQztJQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZCLEtBQUssR0FBRyxJQUFJLG1CQUFTLEVBQUUsQ0FBQztRQUV4QixNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ2YsYUFBYSxFQUFFLHlCQUF5QjtZQUN4QyxNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsTUFBTSxDQUFDLG9FQUFvRSxDQUFDO1lBQy9GLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxHQUFTLEVBQUU7WUFDbEUsTUFBTSxjQUFjLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBTyxHQUFHLEVBQUUsRUFBRSxrREFBQyxPQUFBLE1BQU0sZUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLEdBQUEsQ0FBQyxDQUFDLENBQUM7WUFDdkYsTUFBTSxZQUFZLEdBQUcsTUFBTSxxQ0FBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUU3RCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBYSxDQUFDO2dCQUNqQyxRQUFRLEVBQUUsQ0FBQztnQkFDWCxJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUM7Z0JBQzNDLEdBQUcsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLHVDQUF1QyxDQUFDO2FBQ3BFLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsa0RBQWtELEVBQUUsR0FBUyxFQUFFO1lBQ2hFLE1BQU0sY0FBYyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQU8sR0FBRyxFQUFFLEVBQUUsa0RBQUMsT0FBQSxNQUFNLGVBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFBLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLE1BQU0sV0FBVyxHQUFHLE1BQU0scUNBQWlCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDNUQsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRS9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsdURBQXVELEVBQUUsR0FBRyxFQUFFO1FBQ3JFLE1BQU0sV0FBVyxHQUE0QixFQUFFLENBQUM7UUFFaEQsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQVMsRUFBRTtZQUN6QyxNQUFNLE1BQU0sQ0FBQyxxQ0FBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsMkJBQWUsQ0FBQyxDQUFDO1FBQ3ZGLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxJQUFJLEtBQWdCLENBQUM7SUFDckIsTUFBTSxRQUFRLEdBQUc7UUFDZixpQ0FBc0IsQ0FDcEIseUJBQXlCLEVBQ3pCLGtCQUFrQixFQUNsQixvUUFBb1EsQ0FDclE7UUFDRCxpQ0FBc0IsQ0FDcEIseUJBQXlCLEVBQ3pCLGtCQUFrQixFQUNsQixvUUFBb1EsQ0FDclE7UUFDRCw2QkFBa0IsQ0FDaEIseUJBQXlCLEVBQ3pCLGtCQUFrQixFQUNsQixvUUFBb1EsRUFDcFEsMEZBQTBGLENBQzNGO1FBQ0QsZ0NBQXFCLENBQ25CLHlCQUF5QixFQUN6QixRQUFRLEVBQ1IsMEZBQTBGLENBQzNGO1FBQ0QsZ0NBQXFCLENBQ25CLHlCQUF5QixFQUN6QixRQUFRLEVBQ1IsMEZBQTBGLENBQzNGO0tBQ0YsQ0FBQztJQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZCLEtBQUssR0FBRyxJQUFJLG1CQUFTLEVBQUUsQ0FBQztRQUV4QixNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ2YsYUFBYSxFQUFFLHlCQUF5QjtZQUN4QyxNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsTUFBTSxDQUFDLG9FQUFvRSxDQUFDO1lBQy9GLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOERBQThELEVBQUUsR0FBUyxFQUFFO1FBQzVFLE1BQU0sY0FBYyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQU8sR0FBRyxFQUFFLEVBQUUsa0RBQUMsT0FBQSxNQUFNLGVBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFBLENBQUMsQ0FBQyxDQUFDO1FBQ3ZGLE1BQU0sWUFBWSxHQUFHLE1BQU0sc0NBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFOUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUNqQztnQkFDRSxRQUFRLEVBQUUsQ0FBQztnQkFDWCxJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUM7Z0JBQzNDLEdBQUcsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLHVDQUF1QyxDQUFDO2FBQ3BFO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLENBQUM7Z0JBQ1gsSUFBSSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDO2dCQUMzQyxHQUFHLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyx1Q0FBdUMsQ0FBQzthQUNwRTtZQUNEO2dCQUNFLFFBQVEsRUFBRSxDQUFDO2dCQUNYLElBQUksRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQztnQkFDM0MsR0FBRyxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsdUNBQXVDLENBQUM7YUFDcEU7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtEQUFrRCxFQUFFLEdBQVMsRUFBRTtRQUNoRSxNQUFNLGNBQWMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFPLEdBQUcsRUFBRSxFQUFFLGtEQUFDLE9BQUEsTUFBTSxlQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsR0FBQSxDQUFDLENBQUMsQ0FBQztRQUN2RixNQUFNLFlBQVksR0FBRyxNQUFNLHNDQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTlELEtBQUssTUFBTSxXQUFXLElBQUksWUFBWSxFQUFFO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUUvQixNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDdEQ7SUFDSCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==
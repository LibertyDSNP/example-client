import * as coreImport from "./core";
export declare const core: typeof coreImport;
import * as generatorsImport from "./generators";
export declare const generators: typeof generatorsImport;
export * from "./config";
export * from "./content";
export * from "./createPublication";
export * from "./handles";
export * from "./network";
export * from "./search";
import * as configImport from "./config";
export declare const config: typeof configImport;
import * as contentImport from "./content";
export declare const content: typeof contentImport;
import * as createPublicationImport from "./createPublication";
export declare const createPublication: typeof createPublicationImport;
import * as handlesImport from "./handles";
export declare const handles: typeof handlesImport;
import * as networkImport from "./network";
export declare const network: typeof networkImport;
import * as searchImport from "./search";
export declare const search: typeof searchImport;
declare const _default: {
    core: typeof coreImport;
    subscribe: (_filters: searchImport.BaseFilters, _callback: (event: import("./core/messages").DSNPType) => void) => string;
    unsubscribe: (_id: string) => void;
    fetchEvents: (_filters: searchImport.FetchFilters) => Promise<import("./core/messages").DSNPType[]>;
    follow: (followeeId: string, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/batch/batchMessages").BatchGraphChangeMessage>;
    unfollow: (followeeId: string, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/batch/batchMessages").BatchGraphChangeMessage>;
    isFollowing: (_follower: string, _followee?: string | undefined, _opts?: Partial<configImport.Config> | undefined) => Promise<boolean>;
    getFollowers: (_followee?: string | undefined, _opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/contracts/registry").Registration[]>;
    getFollowees: (_follower?: string | undefined, _opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/contracts/registry").Registration[]>;
    createRegistration: (addr: string, handle: string, opts?: Partial<configImport.Config> | undefined) => Promise<string>;
    resolveHandle: (handle: string, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/contracts/registry").Registration | null>;
    resolveId: (dsnpUserId: string, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/contracts/registry").Registration | null>;
    availabilityFilter: (handles: string[], opts?: Partial<configImport.Config> | undefined) => Promise<string[]>;
    isAvailable: (handle: string, opts?: Partial<configImport.Config> | undefined) => Promise<boolean>;
    createPublication: <T extends import("./core/messages").DSNPType>(messages: import("./core/utilities").AsyncOrSyncIterable<import("./core/batch/batchMessages").DSNPMessageSigned<import("./core/messages").DSNPTypedMessage<T>>>, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/contracts/publisher").Publication>;
    createPublications: (messages: import("./core/utilities").AsyncOrSyncIterable<import("./core/batch/batchMessages").DSNPBatchMessage>, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/contracts/publisher").Publication[]>;
    InvalidActivityPubOpts: Error;
    InvalidInReplyTo: Error;
    broadcast: (contentOptions: Partial<import("./core/activityPub").ActivityPub>, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/batch/batchMessages").BatchBroadcastMessage>;
    reply: (contentOptions: Partial<import("./core/activityPub").ActivityPub>, inReplyTo: string, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/batch/batchMessages").BatchReplyMessage>;
    react: (emoji: string, inReplyTo: string, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/batch/batchMessages").BatchReactionMessage>;
    profile: (contentOptions: Partial<import("./core/activityPub").ActivityPub>, opts?: Partial<configImport.Config> | undefined) => Promise<import("./core/batch/batchMessages").BatchProfileMessage>;
    MissingContract: Error;
    MissingSigner: Error;
    MissingProvider: Error;
    MissingStore: Error;
    MissingUser: Error;
    getConfig: (overrides?: Partial<configImport.Config> | undefined) => configImport.Config;
    setConfig: (newConfig: Partial<configImport.Config>) => configImport.Config;
    requireGetProvider: (opts?: Partial<configImport.Config> | undefined) => import("@ethersproject/abstract-provider").Provider;
    requireGetSigner: (opts?: Partial<configImport.Config> | undefined) => import("ethers").Signer;
    requireGetStore: (opts?: Partial<configImport.Config> | undefined) => import("./core/store").StoreInterface;
    requireGetCurrentFromId: (opts?: Partial<configImport.Config> | undefined) => string;
    getContracts: (opts?: Partial<configImport.Config> | undefined) => configImport.Contracts;
};
export default _default;

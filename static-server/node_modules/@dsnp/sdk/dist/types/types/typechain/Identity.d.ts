/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IdentityInterface extends ethers.utils.Interface {
  functions: {
    "delegate(address,uint8)": FunctionFragment;
    "delegateByEIP712Sig(uint8,bytes32,bytes32,tuple)": FunctionFragment;
    "delegateRemove(address,uint64)": FunctionFragment;
    "delegateRemoveByEIP712Sig(uint8,bytes32,bytes32,tuple)": FunctionFragment;
    "doesRoleHavePermission(uint8,uint8)": FunctionFragment;
    "getNonceForDelegate(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isAuthorizedTo(address,uint8,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateByEIP712Sig",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      { nonce: BigNumberish; delegateAddr: string; role: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateRemove",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateRemoveByEIP712Sig",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      { nonce: BigNumberish; delegateAddr: string; endBlock: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doesRoleHavePermission",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonceForDelegate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedTo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateByEIP712Sig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateRemoveByEIP712Sig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesRoleHavePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonceForDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "DSNPAddDelegate(address,uint8)": EventFragment;
    "DSNPRemoveDelegate(address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DSNPAddDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DSNPRemoveDelegate"): EventFragment;
}

export class Identity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IdentityInterface;

  functions: {
    delegate(
      newDelegate: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; delegateAddr: string; role: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateRemove(
      addr: string,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateRemoveByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: {
        nonce: BigNumberish;
        delegateAddr: string;
        endBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doesRoleHavePermission(
      role: BigNumberish,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNonceForDelegate(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAuthorizedTo(
      addr: string,
      permission: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  delegate(
    newDelegate: string,
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateByEIP712Sig(
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    change: { nonce: BigNumberish; delegateAddr: string; role: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateRemove(
    addr: string,
    endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateRemoveByEIP712Sig(
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    change: {
      nonce: BigNumberish;
      delegateAddr: string;
      endBlock: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doesRoleHavePermission(
    role: BigNumberish,
    permission: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNonceForDelegate(addr: string, overrides?: CallOverrides): Promise<number>;

  initialize(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAuthorizedTo(
    addr: string,
    permission: BigNumberish,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    delegate(
      newDelegate: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; delegateAddr: string; role: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    delegateRemove(
      addr: string,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateRemoveByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: {
        nonce: BigNumberish;
        delegateAddr: string;
        endBlock: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    doesRoleHavePermission(
      role: BigNumberish,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNonceForDelegate(
      addr: string,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize(owner: string, overrides?: CallOverrides): Promise<void>;

    isAuthorizedTo(
      addr: string,
      permission: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    DSNPAddDelegate(
      delegate?: string | null,
      role?: null
    ): TypedEventFilter<[string, number], { delegate: string; role: number }>;

    DSNPRemoveDelegate(
      delegate?: string | null,
      endBlock?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { delegate: string; endBlock: BigNumber }
    >;
  };

  estimateGas: {
    delegate(
      newDelegate: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; delegateAddr: string; role: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateRemove(
      addr: string,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateRemoveByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: {
        nonce: BigNumberish;
        delegateAddr: string;
        endBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doesRoleHavePermission(
      role: BigNumberish,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonceForDelegate(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAuthorizedTo(
      addr: string,
      permission: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegate(
      newDelegate: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; delegateAddr: string; role: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateRemove(
      addr: string,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateRemoveByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: {
        nonce: BigNumberish;
        delegateAddr: string;
        endBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doesRoleHavePermission(
      role: BigNumberish,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonceForDelegate(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorizedTo(
      addr: string,
      permission: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

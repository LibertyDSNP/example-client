/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RegistryInterface extends ethers.utils.Interface {
  functions: {
    "changeAddress(address,string)": FunctionFragment;
    "changeAddressByEIP712Sig(uint8,bytes32,bytes32,tuple)": FunctionFragment;
    "changeHandle(string,string)": FunctionFragment;
    "changeHandleByEIP712Sig(uint8,bytes32,bytes32,tuple)": FunctionFragment;
    "register(address,string)": FunctionFragment;
    "resolveHandleToNonce(string)": FunctionFragment;
    "resolveRegistration(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAddressByEIP712Sig",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      { nonce: BigNumberish; addr: string; handle: string }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHandle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHandleByEIP712Sig",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      { nonce: BigNumberish; oldHandle: string; newHandle: string }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveHandleToNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveRegistration",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAddressByEIP712Sig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeHandleByEIP712Sig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveHandleToNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveRegistration",
    data: BytesLike
  ): Result;

  events: {
    "DSNPRegistryUpdate(uint64,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DSNPRegistryUpdate"): EventFragment;
}

export class Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryInterface;

  functions: {
    changeAddress(
      newAddr: string,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAddressByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; addr: string; handle: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeHandle(
      oldHandle: string,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeHandleByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; oldHandle: string; newHandle: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    register(
      addr: string,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveHandleToNonce(
      handle: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    resolveRegistration(
      handle: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  changeAddress(
    newAddr: string,
    handle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAddressByEIP712Sig(
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    change: { nonce: BigNumberish; addr: string; handle: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeHandle(
    oldHandle: string,
    newHandle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeHandleByEIP712Sig(
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    change: { nonce: BigNumberish; oldHandle: string; newHandle: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  register(
    addr: string,
    handle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveHandleToNonce(
    handle: string,
    overrides?: CallOverrides
  ): Promise<number>;

  resolveRegistration(
    handle: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  callStatic: {
    changeAddress(
      newAddr: string,
      handle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAddressByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; addr: string; handle: string },
      overrides?: CallOverrides
    ): Promise<void>;

    changeHandle(
      oldHandle: string,
      newHandle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeHandleByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; oldHandle: string; newHandle: string },
      overrides?: CallOverrides
    ): Promise<void>;

    register(
      addr: string,
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveHandleToNonce(
      handle: string,
      overrides?: CallOverrides
    ): Promise<number>;

    resolveRegistration(
      handle: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  filters: {
    DSNPRegistryUpdate(
      id?: BigNumberish | null,
      addr?: string | null,
      handle?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { id: BigNumber; addr: string; handle: string }
    >;
  };

  estimateGas: {
    changeAddress(
      newAddr: string,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAddressByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; addr: string; handle: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeHandle(
      oldHandle: string,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeHandleByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; oldHandle: string; newHandle: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    register(
      addr: string,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveHandleToNonce(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveRegistration(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeAddress(
      newAddr: string,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAddressByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; addr: string; handle: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeHandle(
      oldHandle: string,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeHandleByEIP712Sig(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      change: { nonce: BigNumberish; oldHandle: string; newHandle: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    register(
      addr: string,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveHandleToNonce(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveRegistration(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

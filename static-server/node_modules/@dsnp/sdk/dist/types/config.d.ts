import { ethers } from "ethers";
import { StoreInterface } from "./core/store";
import { HexString } from "./types/Strings";
export declare const MissingContract: Error;
export declare const MissingSigner: Error;
export declare const MissingProvider: Error;
export declare const MissingStore: Error;
export declare const MissingUser: Error;
export interface Contracts {
    publisher?: HexString;
    beacon?: HexString;
    beaconFactory?: HexString;
    identityLogic?: HexString;
    identityCloneFactory?: HexString;
    registry?: HexString;
}
export interface Config {
    provider?: ethers.providers.Provider;
    signer?: ethers.Signer;
    store?: StoreInterface;
    contracts: Contracts;
    currentFromId?: string;
    [index: string]: unknown;
}
export declare type ConfigOpts = Partial<Config>;
export declare const getConfig: (overrides?: Partial<Config> | undefined) => Config;
export declare const setConfig: (newConfig: ConfigOpts) => Config;
export declare const requireGetProvider: (opts?: Partial<Config> | undefined) => ethers.providers.Provider;
export declare const requireGetSigner: (opts?: Partial<Config> | undefined) => ethers.Signer;
export declare const requireGetStore: (opts?: Partial<Config> | undefined) => StoreInterface;
export declare const requireGetCurrentFromId: (opts?: Partial<Config> | undefined) => string;
export declare const getContracts: (opts?: Partial<Config> | undefined) => Contracts;

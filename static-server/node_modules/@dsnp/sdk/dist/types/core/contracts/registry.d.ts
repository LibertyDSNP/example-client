import { ethers } from "ethers";
import { EthereumAddress, HexString } from "../../types/Strings";
import { ContractTransaction } from "ethers";
import { Permission } from "./identity";
import { DSNPMessage } from "../messages";
import { DSNPUserId } from "../utilities/identifiers";
export interface Registration {
    contractAddr: EthereumAddress;
    dsnpUserId: DSNPUserId;
    handle: Handle;
}
export declare type Handle = string;
export declare const resolveRegistration: (handle: Handle, opts?: Partial<import("../../config").Config> | undefined) => Promise<Registration | null>;
export declare const register: (identityContractAddress: HexString, handle: Handle, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const changeAddress: (handle: Handle, identityContractAddress: HexString, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const changeHandle: (oldHandle: Handle, newHandle: Handle, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const getDSNPRegistryUpdateEvents: (filter: Partial<Omit<Registration, "handle">>, opts?: Partial<import("../../config").Config> | undefined) => Promise<Registration[]>;
export declare const isMessageSignatureAuthorizedTo: (signature: HexString, message: DSNPMessage | string, dsnpUserId: DSNPUserId, permission: Permission, blockTag?: ethers.providers.BlockTag | undefined, opts?: Partial<import("../../config").Config> | undefined) => Promise<boolean>;

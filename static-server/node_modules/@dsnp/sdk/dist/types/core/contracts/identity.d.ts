import { ContractTransaction } from "ethers";
import { EthereumAddress, HexString } from "../../types/Strings";
import { TypedMessageDataField, TypedData, EIP712Signature, TypedDomainData } from "./utilities";
export declare enum DelegationRole {
    NONE = 0,
    OWNER = 1,
    ANNOUNCER = 2
}
export declare enum Permission {
    NONE = 0,
    ANNOUNCE = 1,
    OWNERSHIP_TRANSFER = 2,
    DELEGATE_ADD = 3,
    DELEGATE_REMOVE = 4
}
export declare const createCloneProxy: (logic?: string | undefined, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const createCloneProxyWithOwner: (owner: EthereumAddress, logic?: string | undefined, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const createBeaconProxy: (beacon: EthereumAddress, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const createBeaconProxyWithOwner: (owner: EthereumAddress, beacon: EthereumAddress, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const createAndRegisterBeaconProxy: (userAddress: EthereumAddress, handle: string, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const isAuthorizedTo: (address: EthereumAddress, contractAddress: EthereumAddress, permission: Permission, blockNumber: number, opts?: Partial<import("../../config").Config> | undefined) => Promise<boolean>;
interface DelegateAdd extends TypedMessageDataField {
    nonce: number;
    delegateAddr: HexString;
    role: DelegationRole;
}
export interface DelegateAddParams {
    nonce?: number;
    delegateAddr: HexString;
    role: DelegationRole;
}
export declare const getDomainSeparator: (contractAddress: EthereumAddress, opts?: Partial<import("../../config").Config> | undefined) => Promise<TypedDomainData>;
export declare const createAddDelegateEip712TypedData: (contractAddress: EthereumAddress, message: DelegateAddParams, opts?: Partial<import("../../config").Config> | undefined) => Promise<TypedData>;
export declare const getNonceForDelegate: (contractAddress: EthereumAddress, delegateAddress: EthereumAddress, opts?: Partial<import("../../config").Config> | undefined) => Promise<number>;
export declare const upsertDelegateBySignature: (contractAddress: EthereumAddress, signature: EIP712Signature, message: DelegateAdd, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export declare const upsertDelegate: (contractAddress: EthereumAddress, address: EthereumAddress, role: DelegationRole, opts?: Partial<import("../../config").Config> | undefined) => Promise<ContractTransaction>;
export {};

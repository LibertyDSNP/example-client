import { ParquetReader } from "@dsnp/parquetjs";
import { DSNPMessageSigned } from "../batch/batchMessages";
import { DSNPType, DSNPTypedMessage } from "../messages/messages";
import { Schema, BloomFilterOptions } from "./parquetSchema";
import { WriteStream } from "../store";
import { HexString } from "../../types/Strings";
import { AsyncOrSyncIterable } from "../utilities";
declare type ReadRowFunction = {
    (row: DSNPType): void;
};
interface BatchFileData {
    url: URL;
    hash: HexString;
}
declare type BatchIterable<T extends DSNPType> = AsyncOrSyncIterable<DSNPMessageSigned<DSNPTypedMessage<T>>>;
export declare const createFile: <T extends DSNPType>(targetPath: string, messages: BatchIterable<T>, opts?: Partial<import("../../config").Config> | undefined) => Promise<BatchFileData>;
export declare const writeBatch: <T extends DSNPType>(writeStream: WriteStream, schema: Schema, messages: BatchIterable<T>, opts?: BloomFilterOptions | undefined) => Promise<void>;
export declare const openURL: (url: URL) => Promise<typeof ParquetReader>;
export declare const openFile: (path: string) => Promise<typeof ParquetReader>;
export declare const readFile: (reader: typeof ParquetReader, doReadRow: ReadRowFunction) => Promise<void>;
export declare const includes: (reader: typeof ParquetReader, column: string, item: number | string) => Promise<boolean>;
export {};

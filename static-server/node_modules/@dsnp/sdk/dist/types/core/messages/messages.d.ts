import { HexString } from "../../types/Strings";
import { DSNPMessageSigned } from "../batch/batchMessages";
export declare enum DSNPType {
    GraphChange = 1,
    Broadcast = 2,
    Reply = 3,
    Reaction = 4,
    Profile = 5
}
export declare type DSNPMessage = DSNPTypedMessage<DSNPType>;
export interface DSNPTypedMessage<T extends DSNPType> {
    dsnpType: T;
}
export interface BroadcastMessage extends DSNPTypedMessage<DSNPType.Broadcast> {
    contentHash: string;
    fromId: string;
    url: string;
}
export declare const createBroadcastMessage: (fromId: string, url: string, hash: HexString) => BroadcastMessage;
export interface ReplyMessage extends DSNPTypedMessage<DSNPType.Reply> {
    contentHash: HexString;
    fromId: string;
    inReplyTo: string;
    url: string;
}
export declare const createReplyMessage: (fromId: string, url: string, hash: HexString, inReplyTo: string) => ReplyMessage;
export interface ReactionMessage extends DSNPTypedMessage<DSNPType.Reaction> {
    emoji: string;
    fromId: string;
    inReplyTo: string;
}
export declare const createReactionMessage: (fromId: string, emoji: string, inReplyTo: string) => ReactionMessage;
export declare enum DSNPGraphChangeType {
    Follow = 1,
    Unfollow = 2
}
export interface GraphChangeMessage extends DSNPTypedMessage<DSNPType.GraphChange> {
    fromId: string;
    changeType: DSNPGraphChangeType;
    objectId: string;
}
export declare const createFollowGraphChangeMessage: (fromId: string, followeeId: string) => GraphChangeMessage;
export declare const createUnfollowGraphChangeMessage: (fromId: string, followeeId: string) => GraphChangeMessage;
export declare const serialize: (message: DSNPMessage) => string;
export interface ProfileMessage extends DSNPTypedMessage<DSNPType.Profile> {
    contentHash: string;
    fromId: string;
    url: string;
}
export declare const createProfileMessage: (fromId: string, url: string, hash: HexString) => ProfileMessage;
export declare const sign: <T extends DSNPMessage>(message: T, opts?: Partial<import("../../config").Config> | undefined) => Promise<DSNPMessageSigned<T>>;
export declare const recoverPublicKey: (message: DSNPMessage, signature: HexString) => HexString;

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as config from "./config";
import { isAvailable, availabilityFilter, resolveHandle, resolveId, createRegistration } from "./handles";
import * as registry from "./core/contracts/registry";
import { createCloneProxy } from "./core/contracts/identity";
import { setupConfig } from "./test/sdkTestConfig";
import { revertHardhat, snapshotHardhat, setupSnapshot } from "./test/hardhatRPC";
import { EthAddressRegex } from "./test/matchers";
import { convertDSNPUserIdToBigNumber } from "./core/utilities/identifiers";
const createIdentityContract = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const receipt = yield (yield createCloneProxy()).wait();
    const proxyContractEvent = (_a = receipt.events) === null || _a === void 0 ? void 0 : _a.find((event) => event.event === "ProxyCreated");
    return (_b = proxyContractEvent === null || proxyContractEvent === void 0 ? void 0 : proxyContractEvent.args) === null || _b === void 0 ? void 0 : _b[0];
});
describe("handles", () => {
    setupSnapshot();
    const notTakens = ["not-taken", "not-taken1", "not-taken2"];
    const takens = ["taken", "taken1", "taken2"];
    let provider;
    let signer;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        ({ provider, signer } = setupConfig());
        yield snapshotHardhat(provider);
        config.setConfig({ provider, signer });
        const logicAddress = yield createIdentityContract();
        for (const handle of takens) {
            yield (yield registry.register(logicAddress, handle)).wait();
        }
    }));
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield revertHardhat(provider);
    }));
    describe("#isAvailable", () => {
        it("returns true if it is available", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(yield isAvailable("not-taken")).toBe(true);
        }));
        it("returns false if it is not available", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(yield isAvailable("taken")).toBe(false);
        }));
    });
    describe("#availabilityFilter", () => {
        it("returns all if all are available", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(yield availabilityFilter(notTakens)).toEqual(notTakens);
        }));
        it("returns [] if none are available", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(yield availabilityFilter(takens)).toEqual([]);
        }));
        it("returns just the not taken ones if mixed", () => __awaiter(void 0, void 0, void 0, function* () {
            const all = ["not-taken", "taken", "not-taken1", "taken1", "taken2", "not-taken2"];
            expect(yield availabilityFilter(all)).toEqual(notTakens);
        }));
    });
    describe("#resolveHandle", () => {
        it("is a success pass through", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield resolveHandle("taken");
            expect(result).not.toBeNull();
            if (result === null)
                throw new Error();
            expect(result.contractAddr).toMatch(EthAddressRegex);
            expect(result.dsnpUserId).toEqual("dsnp://00000000000003e8");
            expect(result.handle).toEqual("taken");
        }));
        it("is a failure pass through", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield resolveHandle("not-taken");
            expect(result).toBeNull();
        }));
    });
    describe("#resolveId", () => {
        it("returns null for unfound", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield resolveId("dsnp://0000000000001388");
            expect(result).toBeNull();
        }));
        it("Handles the case of a single event with number", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield resolveId("dsnp://00000000000003e8");
            expect(result === null || result === void 0 ? void 0 : result.handle).toEqual("taken");
        }));
        it("Handles the case of a single event with hex", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield resolveId("dsnp://0000000000000" + Number(1001).toString(16));
            expect(result === null || result === void 0 ? void 0 : result.handle).toEqual("taken1");
        }));
        it("Handles the case of multiple events", () => __awaiter(void 0, void 0, void 0, function* () {
            yield registry.changeHandle("taken", "new-taken");
            const result = yield resolveId("dsnp://00000000000003e8");
            expect(result === null || result === void 0 ? void 0 : result.handle).toEqual("new-taken");
        }));
    });
    describe("#createRegistration", () => {
        const handle = "flarp";
        const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
        it("returns a DSNP User Id", () => __awaiter(void 0, void 0, void 0, function* () {
            const dsnpUserId = yield createRegistration(fakeAddress, handle);
            const id = convertDSNPUserIdToBigNumber(dsnpUserId);
            expect(id.toNumber()).toBeGreaterThan(999);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hhbmRsZXMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUNuQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDMUcsT0FBTyxLQUFLLFFBQVEsTUFBTSwyQkFBMkIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTVFLE1BQU0sc0JBQXNCLEdBQUcsR0FBUyxFQUFFOztJQUN4QyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEQsTUFBTSxrQkFBa0IsR0FBRyxNQUFBLE9BQU8sQ0FBQyxNQUFNLDBDQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxjQUFjLENBQUMsQ0FBQztJQUMzRixPQUFPLE1BQUEsa0JBQWtCLGFBQWxCLGtCQUFrQix1QkFBbEIsa0JBQWtCLENBQUUsSUFBSSwwQ0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUEsQ0FBQztBQUVGLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ3ZCLGFBQWEsRUFB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
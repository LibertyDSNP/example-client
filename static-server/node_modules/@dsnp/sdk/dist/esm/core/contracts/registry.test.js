var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { revertHardhat, snapshotHardhat, setupSnapshot } from "../../test/hardhatRPC";
import { changeAddress, changeHandle, getDSNPRegistryUpdateEvents, register, resolveRegistration, isMessageSignatureAuthorizedTo, } from "./registry";
import { Identity__factory } from "../../types/typechain";
import { setupConfig } from "../../test/sdkTestConfig";
import { Permission } from "./identity";
import { sign } from "../messages";
import { generateBroadcast } from "../../generators/dsnpGenerators";
import { getIdFromRegisterTransaction, newRegistrationForAccountIndex, } from "../../test/testAccounts";
import { generateHexString } from "@dsnp/test-generators";
describe("registry", () => {
    let signer;
    let provider;
    setupSnapshot();
    beforeAll(() => {
        ({ signer, provider } = setupConfig());
    });
    describe("#resolveRegistration", () => {
        const handle = "registered";
        let givenId;
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield snapshotHardhat(provider);
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const transaction = yield register(identityContract.address, handle);
            givenId = yield getIdFromRegisterTransaction(transaction);
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield revertHardhat(provider);
        }));
        it("Returns the correct id", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(givenId).toEqual("dsnp://00000000000003e8");
            const result = yield resolveRegistration(handle);
            expect(result === null || result === void 0 ? void 0 : result.dsnpUserId).toEqual(givenId);
        }));
        it("Returns null for an unfound handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield resolveRegistration("not-registered");
            expect(result).toBeNull();
        }));
    });
    describe("#register", () => {
        const handle = "registered";
        const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
        let idContractAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield snapshotHardhat(provider);
            const identityContract = yield new Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            idContractAddr = identityContract.address;
            yield register(identityContract.address, handle);
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield revertHardhat(provider);
        }));
        it("Should throw for an already registered handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const pendingTx = register(idContractAddr, handle);
            yield expect(pendingTx).transactionRejectsWith(/Handle already exists/);
        }));
        it("returns a Contract Transaction that can be resolved into a DSNP User Id", () => __awaiter(void 0, void 0, void 0, function* () {
            const transaction = yield register(idContractAddr, "new-handle");
            expect(yield getIdFromRegisterTransaction(transaction)).toEqual("dsnp://00000000000003e9");
        }));
    });
    describe("#changeHandle", () => {
        const handle = "registered";
        let idContractAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield snapshotHardhat(provider);
            const identityContract = yield new Identity__factory(signer).deploy(yield signer.getAddress());
            yield identityContract.deployed();
            idContractAddr = identityContract.address;
            yield register(identityContract.address, handle);
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield revertHardhat(provider);
        }));
        it("Should succeed with an unregistered handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const otherHandle = "completely new";
            const pendingTx = changeHandle(handle, otherHandle);
            yield expect(pendingTx).resolves.toBeTruthy();
        }));
        it("Should throw for the same handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const pendingTx = changeHandle(handle, handle);
            yield expect(pendingTx).transactionRejectsWith(/New handle already exists/);
        }));
        it("Should throw for an already registered handle", () => __awaiter(void 0, void 0, void 0, function* () {
            const otherHandle = "reg2";
            yield register(idContractAddr, otherHandle);
            const pendingTx = changeHandle(handle, otherHandle);
            yield expect(pendingTx).transactionRejectsWith(/New handle already exists/);
        }));
        it("returns a Contract Transaction with the DSNPRegistryUpdate Event", () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const otherHandle = "completely new";
            const contractTransaction = yield changeHandle(handle, otherHandle);
            const receipt = yield contractTransaction.wait();
            expect(receipt.events).toHaveLength(1);
            expect((_b = (_a = receipt.events) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.event).toEqual("DSNPRegistryUpdate");
        }));
    });
    describe("#changeAddress", () => {
        const handle = "registered";
        let newIdContractAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield snapshotHardhat(provider);
            const identityContract = yield new Identity__factory(signer).deploy(yield signer.getAddress());
            yield identityContract.deployed();
            yield register(identityContract.address, handle);
            const newIdentityContract = yield new Identity__factory(signer).deploy(yield signer.getAddress());
            yield newIdentityContract.deployed();
            newIdContractAddr = newIdentityContract.address;
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield revertHardhat(provider);
        }));
        it("Should succeed", () => __awaiter(void 0, void 0, void 0, function* () {
            const pendingTx = changeAddress(handle, newIdContractAddr);
            yield expect(pendingTx).resolves.toBeTruthy();
        }));
        it("Should reject for a non-contract address", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const pendingTx = changeAddress(handle, fakeAddress);
            yield expect(pendingTx).rejects.toBeTruthy();
        }));
        it("returns a Contract Transaction with the DSNPRegistryUpdate Event", () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const contractTransaction = yield changeAddress(handle, newIdContractAddr);
            const receipt = yield contractTransaction.wait();
            expect(receipt.events).toHaveLength(1);
            expect((_b = (_a = receipt.events) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.event).toEqual("DSNPRegistryUpdate");
        }));
    });
    describe("getDSNPRegistryUpdateEvents", () => {
        it("can pull one event", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const handle = "ZebraButtons";
            const identityContractAddress = identityContract.address;
            yield register(identityContractAddress, handle);
            const regs = yield getDSNPRegistryUpdateEvents({
                contractAddr: identityContractAddress,
            });
            expect(regs[0].contractAddr).toEqual(identityContractAddress);
            expect(regs[0].dsnpUserId).toEqual("dsnp://0000000000000" + Number(1000).toString(16));
            expect(regs[0].handle).toEqual(handle);
        }));
        it("Does not pull other almost matching events", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const identityContract2 = yield new Identity__factory(signer).deploy(fakeAddress);
            yield identityContract2.deployed();
            const handle = "ZebraButtons";
            yield register(identityContract.address, handle);
            yield register(identityContract2.address, handle + "2");
            const regs = yield getDSNPRegistryUpdateEvents({
                contractAddr: identityContract.address,
            });
            expect(regs).toHaveLength(1);
            expect(regs[0].contractAddr).toEqual(identityContract.address);
            expect(regs[0].handle).toEqual(handle);
        }));
        it("pulls all the related events for identityContract", () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
            const identityContract = yield new Identity__factory(signer).deploy(fakeAddress);
            yield identityContract.deployed();
            const handle = "ZebraButtons";
            const identityContractAddress = identityContract.address;
            yield register(identityContractAddress, handle);
            yield register(identityContractAddress, handle + "2");
            const regs = yield getDSNPRegistryUpdateEvents({
                contractAddr: identityContractAddress,
            });
            expect(regs).toHaveLength(2);
            expect(regs[0].handle).toEqual(handle);
            expect(regs[1].handle).toEqual(handle + "2");
        }));
        it("pulls all the related events for matching ids in the correct order", () => __awaiter(void 0, void 0, void 0, function* () {
            const identityContract = yield new Identity__factory(signer).deploy(yield signer.getAddress());
            yield identityContract.deployed();
            const handle = "ZebraButtons";
            const identityContractAddress = identityContract.address;
            const tx = yield register(identityContractAddress, handle);
            const id = yield getIdFromRegisterTransaction(tx);
            yield changeHandle(handle, handle + "new");
            const regs = yield getDSNPRegistryUpdateEvents({ dsnpUserId: id });
            expect(regs).toHaveLength(2);
            expect(regs[0].handle).toEqual(handle);
            expect(regs[1].handle).toEqual(handle + "new");
        }));
    });
    describe("validateMessage", () => {
        const msg = generateBroadcast();
        const permAllowed = Permission.ANNOUNCE;
        const permDenied = Permission.OWNERSHIP_TRANSFER;
        let contractAddr = "";
        let sig = "";
        let dsnpUserId = "";
        let signerAddr = "";
        beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield snapshotHardhat(provider);
            signerAddr = yield signer.getAddress();
            const identityContract = yield new Identity__factory(signer).deploy(signerAddr);
            yield identityContract.deployed();
            contractAddr = identityContract.address;
            const tx = yield register(contractAddr, "Animaniacs");
            dsnpUserId = yield getIdFromRegisterTransaction(tx);
            const signedMessage = yield sign(msg);
            sig = signedMessage.signature;
        }));
        afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
            yield revertHardhat(provider);
        }));
        it("returns true if the signer is authorized for the given permissions", () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(isMessageSignatureAuthorizedTo(sig, msg, dsnpUserId, permAllowed)).toBeTruthy();
        }));
        it("returns false if the signer is not authorized for the given permissions", () => __awaiter(void 0, void 0, void 0, function* () {
            const regSigner = yield newRegistrationForAccountIndex(2, "Handel");
            const res = yield isMessageSignatureAuthorizedTo(sig, msg, regSigner.dsnpUserId, permDenied);
            expect(res).toBeFalsy();
        }));
        it("returns false if signature is a real one but not for this message", () => __awaiter(void 0, void 0, void 0, function* () {
            const otherMsg = generateBroadcast();
            const signedMessage = yield sign(otherMsg);
            const badSig = signedMessage.signature;
            const res = yield isMessageSignatureAuthorizedTo(badSig, msg, dsnpUserId, permAllowed);
            expect(res).toBeFalsy();
        }));
        describe("valid block tag =", () => {
            [
                { name: "latest", value: "latest", expected: true },
                { name: "earliest", value: "earliest", expected: true },
                { name: "pending", value: "pending", expected: true },
                { name: "negative number", value: -1, expected: true },
                { name: "positive number", value: 1, expected: true },
                { name: "0x0", value: 0x0, expected: true },
                { name: "0x1", value: 0x1, expected: true },
            ].forEach((tc) => {
                it(`${tc.name} returns ${tc.expected}`, () => __awaiter(void 0, void 0, void 0, function* () {
                    const actual = yield isMessageSignatureAuthorizedTo(sig, msg, dsnpUserId, permAllowed, 1);
                    expect(actual).toEqual(tc.expected);
                }));
            });
        });
        it("throws if id cannot be resolved", () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(isMessageSignatureAuthorizedTo("0xdeadbeef", msg, "0xabcd1234", permAllowed)).rejects.toThrow("Contract was not found");
        }));
        it("throws if signature is garbage", () => __awaiter(void 0, void 0, void 0, function* () {
            const badSig = generateHexString(65);
            yield expect(isMessageSignatureAuthorizedTo(badSig, msg, dsnpUserId, permAllowed)).rejects.toThrow(/signature missing v and recoveryParam/);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,
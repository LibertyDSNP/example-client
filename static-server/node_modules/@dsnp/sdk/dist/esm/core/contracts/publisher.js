var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { requireGetProvider, MissingContract, getContracts, requireGetSigner } from "../../config";
import { Publisher__factory } from "../../types/typechain";
import { getContractAddress } from "./contract";
const CONTRACT_NAME = "Publisher";
export const publish = (publications) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getPublisherContract();
    return contract.publish(publications);
});
export const dsnpBatchFilter = () => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getPublisherContract();
    return contract.filters.DSNPBatchPublication();
});
const getPublisherContract = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { publisher } = getContracts(opts);
    const signer = requireGetSigner(opts);
    const provider = requireGetProvider(opts);
    const address = publisher || (yield getContractAddress(provider, CONTRACT_NAME));
    if (!address)
        throw MissingContract;
    return Publisher__factory.connect(address, signer);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvY29udHJhY3RzL3B1Ymxpc2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxPQUFPLEVBQWMsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUvRyxPQUFPLEVBQWEsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFaEQsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDO0FBZWxDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFPLFlBQTJCLEVBQWdDLEVBQUU7SUFDekYsTUFBTSxRQUFRLEdBQUcsTUFBTSxvQkFBb0IsRUFBRSxDQUFDO0lBQzlDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUEsQ0FBQztBQU9GLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxHQUErQixFQUFFO0lBQzlELE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLEVBQUUsQ0FBQztJQUM5QyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUNqRCxDQUFDLENBQUEsQ0FBQztBQUVGLE1BQU0sb0JBQW9CLEdBQUcsQ0FBTyxJQUFpQixFQUFzQixFQUFFO0lBQzNFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUMsTUFBTSxPQUFPLEdBQUcsU0FBUyxJQUFJLENBQUMsTUFBTSxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVqRixJQUFJLENBQUMsT0FBTztRQUFFLE1BQU0sZUFBZSxDQUFDO0lBQ3BDLE9BQU8sa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUEsQ0FBQyJ9
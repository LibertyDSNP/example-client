var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ethers } from "ethers";
import { requireGetProvider } from "../../config";
import { dsnpBatchFilter } from "./publisher";
import { Publisher__factory } from "../../types/typechain";
const PUBLISHER_DECODER = new ethers.utils.Interface(Publisher__factory.abi);
export const subscribeToBatchPublications = (doReceivePublication, filter) => __awaiter(void 0, void 0, void 0, function* () {
    let pastLogs = [];
    const currentLogQueue = [];
    const batchFilter = yield dsnpBatchFilter();
    const batchFilterWithOptions = filter ? createFilter(batchFilter, filter) : batchFilter;
    const provider = requireGetProvider();
    let maxBlockNumberForPastLogs = (filter === null || filter === void 0 ? void 0 : filter.fromBlock) || 0;
    let useQueue = (filter === null || filter === void 0 ? void 0 : filter.fromBlock) != undefined;
    provider.on(batchFilterWithOptions, (log) => {
        const logItem = decodeLogsForBatchPublication([log])[0];
        if (useQueue) {
            currentLogQueue.push(logItem);
        }
        else if (logItem.blockNumber > maxBlockNumberForPastLogs) {
            doReceivePublication(logItem);
        }
    });
    if (useQueue) {
        pastLogs = yield getPastLogs(provider, { fromBlock: filter === null || filter === void 0 ? void 0 : filter.fromBlock });
        maxBlockNumberForPastLogs = pastLogs[pastLogs.length - 1].blockNumber;
        while (pastLogs.length > 0) {
            const batchItem = pastLogs.shift();
            if (batchItem)
                doReceivePublication(batchItem);
        }
        while (currentLogQueue.length > 0) {
            const batchItem = currentLogQueue.shift();
            if (batchItem && batchItem.blockNumber > maxBlockNumberForPastLogs)
                doReceivePublication(batchItem);
        }
        useQueue = false;
    }
    return () => {
        provider.off(batchFilterWithOptions);
    };
});
const createFilter = (batchFilter, filterOptions) => {
    const topics = batchFilter.topics ? batchFilter.topics : [];
    const dsnpTypeTopic = (filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.dsnpType) ? "0x" + filterOptions.dsnpType.toString(16).padStart(64, "0") : null;
    if (dsnpTypeTopic) {
        topics.push(dsnpTypeTopic);
    }
    const finalFilter = {
        topics: topics,
    };
    return finalFilter;
};
const getPastLogs = (provider, filter) => __awaiter(void 0, void 0, void 0, function* () {
    const logs = yield provider.getLogs(filter);
    return decodeLogsForBatchPublication(logs);
});
const decodeLogsForBatchPublication = (logs) => {
    return logs
        .map((log) => {
        const fragment = PUBLISHER_DECODER.parseLog(log);
        return { fragment, log: log };
    })
        .filter((desc) => desc.fragment.name === "DSNPBatchPublication")
        .map((item) => {
        return {
            dsnpType: item.fragment.args.dsnpType,
            dsnpHash: item.fragment.args.dsnpHash,
            dsnpUrl: item.fragment.args.dsnpUrl,
            blockNumber: item.log.blockNumber,
            transactionHash: item.log.transactionHash,
        };
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvY29udHJhY3RzL3N1YnNjcmlwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTlDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQWlDN0UsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsQ0FDMUMsb0JBQThDLEVBQzlDLE1BQTJCLEVBQ04sRUFBRTtJQUN2QixJQUFJLFFBQVEsR0FBbUMsRUFBRSxDQUFDO0lBQ2xELE1BQU0sZUFBZSxHQUFtQyxFQUFFLENBQUM7SUFDM0QsTUFBTSxXQUFXLEdBQXVCLE1BQU0sZUFBZSxFQUFFLENBQUM7SUFDaEUsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUV4RixNQUFNLFFBQVEsR0FBRyxrQkFBa0IsRUFBRSxDQUFDO0lBQ3RDLElBQUkseUJBQXlCLEdBQUcsQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsU0FBUyxLQUFJLENBQUMsQ0FBQztJQUN2RCxJQUFJLFFBQVEsR0FBRyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxTQUFTLEtBQUksU0FBUyxDQUFDO0lBRTlDLFFBQVEsQ0FBQyxFQUFFLENBQUMsc0JBQXNC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
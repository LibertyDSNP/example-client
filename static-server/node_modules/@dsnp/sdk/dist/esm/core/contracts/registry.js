var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ethers } from "ethers";
import { getContractAddress, getVmError } from "./contract";
import { MissingContract, requireGetSigner, requireGetProvider, getContracts } from "../../config";
import { Registry__factory } from "../../types/typechain";
import { resolveId } from "../../handles";
import { isAuthorizedTo } from "./identity";
import { serialize } from "../messages";
import { convertBigNumberToDSNPUserId, convertDSNPUserIdToBigNumber } from "../utilities/identifiers";
const CONTRACT_NAME = "Registry";
export const resolveRegistration = (handle, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getContract(opts);
    try {
        const [dsnpUserId, contractAddr] = yield contract.resolveRegistration(handle);
        return {
            handle,
            dsnpUserId: convertBigNumberToDSNPUserId(dsnpUserId),
            contractAddr,
        };
    }
    catch (e) {
        const error = e;
        const vmError = getVmError(error);
        if (vmError === null || vmError === void 0 ? void 0 : vmError.includes("Handle does not exist")) {
            return null;
        }
        throw e;
    }
});
export const register = (identityContractAddress, handle, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getContract(opts);
    const signer = requireGetSigner(opts);
    return yield contract.connect(signer).register(identityContractAddress, handle);
});
export const changeAddress = (handle, identityContractAddress, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getContract(opts);
    const signer = requireGetSigner(opts);
    return yield contract.connect(signer).changeAddress(identityContractAddress, handle);
});
export const changeHandle = (oldHandle, newHandle, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getContract(opts);
    const signer = requireGetSigner(opts);
    return yield contract.connect(signer).changeHandle(oldHandle, newHandle);
});
export const getDSNPRegistryUpdateEvents = (filter, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const dsnpUserId = filter.dsnpUserId ? convertDSNPUserIdToBigNumber(filter.dsnpUserId) : undefined;
    const contract = yield getContract(opts);
    const logs = yield contract.queryFilter(contract.filters.DSNPRegistryUpdate(dsnpUserId, filter.contractAddr));
    return logs.map((desc) => {
        const [id, addr, handle] = desc.args;
        const dsnpUserId = convertBigNumberToDSNPUserId(id);
        return { contractAddr: addr, dsnpUserId, handle };
    });
});
export const isMessageSignatureAuthorizedTo = (signature, message, dsnpUserId, permission, blockTag, opts) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const reg = yield resolveId(dsnpUserId);
    if (!reg)
        throw MissingContract;
    const provider = requireGetProvider(opts);
    let blockNumber = 0x0;
    if (blockTag) {
        const bn = (_a = (yield (provider === null || provider === void 0 ? void 0 : provider.getBlock(blockNumber)))) === null || _a === void 0 ? void 0 : _a.number;
        if (bn)
            blockNumber = bn;
    }
    const messageString = typeof message === "string" ? message : serialize(message);
    const signerAddr = ethers.utils.verifyMessage(messageString, signature);
    return isAuthorizedTo(signerAddr, reg.contractAddr, permission, blockNumber);
});
const getContract = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { registry } = getContracts(opts);
    const provider = requireGetProvider(opts);
    const address = registry || (yield getContractAddress(provider, CONTRACT_NAME));
    if (!address)
        throw MissingContract;
    return Registry__factory.connect(address, provider);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9jb250cmFjdHMvcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNoQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFXLE1BQU0sWUFBWSxDQUFDO0FBRXJFLE9BQU8sRUFBYyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRS9HLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM1QyxPQUFPLEVBQWUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3JELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSw0QkFBNEIsRUFBYyxNQUFNLDBCQUEwQixDQUFDO0FBRWxILE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQztBQWlCakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBTyxNQUFjLEVBQUUsSUFBaUIsRUFBZ0MsRUFBRTtJQUMzRyxNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxJQUFJO1FBQ0YsTUFBTSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsR0FBRyxNQUFNLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RSxPQUFPO1lBQ0wsTUFBTTtZQUNOLFVBQVUsRUFBRSw0QkFBNEIsQ0FBQyxVQUFVLENBQUM7WUFDcEQsWUFBWTtTQUNiLENBQUM7S0FDSDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxLQUFLLEdBQVksQ0FB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
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { keccak256 } from "js-sha3";
import * as types from "../../types/typechain";
import { ethers } from "ethers";
const DSNP_MIGRATION_TYPE = "DSNPMigration(address,string)";
export const getKeccakTopic = (topic) => "0x" + keccak256(topic);
const EVENTS_ABI = new ethers.utils.Interface([
    types.Publisher__factory,
    types.BeaconFactory__factory,
    types.Identity__factory,
    types.Migrations__factory,
    types.Registry__factory,
]
    .reduce((m, f) => m.concat(f.abi), [])
    .filter((ef) => ef.type === "event"));
export const DSNP_MIGRATION_ABI = [
    ethers.utils.ParamType.fromObject({
        indexed: false,
        baseType: "address",
        name: "contractAddr",
        type: "address",
    }),
    ethers.utils.ParamType.fromObject({
        indexed: false,
        baseType: "string",
        name: "contractName",
        type: "string",
    }),
];
const decodeReturnValues = (inputs, logs) => {
    const decoder = new ethers.utils.AbiCoder();
    return logs.map((log) => {
        const { contractAddr, contractName } = decoder.decode(inputs, log.data);
        return {
            contractAddr: contractAddr,
            contractName: contractName,
            blockNumber: log.blockNumber,
            blockHash: log.blockHash,
        };
    });
};
const filterValues = (values, contractName) => {
    return values.filter((result) => {
        return result.contractName == contractName;
    });
};
export const getContractAddress = (provider, contractName) => __awaiter(void 0, void 0, void 0, function* () {
    const topic = getKeccakTopic(DSNP_MIGRATION_TYPE);
    const logs = yield provider.getLogs({
        topics: [topic],
        fromBlock: 0,
    });
    const decodedValues = decodeReturnValues(DSNP_MIGRATION_ABI, logs);
    const filteredResults = filterValues(decodedValues, contractName);
    return filteredResults.length > 0 ? filteredResults[filteredResults.length - 1].contractAddr : null;
});
export const getVmError = (e) => {
    var _a, _b, _c;
    try {
        if (e.body) {
            const parsed = JSON.parse(e.body);
            return (_a = parsed === null || parsed === void 0 ? void 0 : parsed.error) === null || _a === void 0 ? void 0 : _a.message;
        }
        if ((_b = e.error) === null || _b === void 0 ? void 0 : _b.body) {
            const parsed = JSON.parse(e.error.body);
            return (_c = parsed === null || parsed === void 0 ? void 0 : parsed.error) === null || _c === void 0 ? void 0 : _c.message;
        }
    }
    catch (e) {
        return undefined;
    }
    return undefined;
};
export const parseLogs = (logs) => {
    return logs.map((log) => EVENTS_ABI.parseLog(log));
};
export const findEvent = (name, logs) => {
    const event = parseLogs(logs).find((e) => e.name === name);
    if (event === undefined) {
        throw `no ${name} logs found`;
    }
    return event;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9jb250cmFjdHMvY29udHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEtBQUssS0FBSyxNQUFNLHVCQUF1QixDQUFDO0FBQy9DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxtQkFBbUIsR0FBRywrQkFBK0IsQ0FBQztBQUU1RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUFhLEVBQWEsRUFBRSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFJcEYsTUFBTSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FDM0M7SUFDRSxLQUFLLENBQUMsa0JBQWtCO0lBQ3hCLEtBQUssQ0FBQyxzQkFBc0I7SUFDNUIsS0FBSyxDQUFDLGlCQUFpQjtJQUN2QixLQUFLLENBQUMsbUJBQW1CO0lBQ3pCLEtBQUssQ0FBQyxpQkFBaUI7Q0FDeEI7S0FFRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUEwQixDQUFDLEVBQUUsRUFBeUIsQ0FBQztLQUNuRixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUF3QixDQUM5RCxDQUFDO0FBZ0JGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUE2QjtJQUMxRCxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDaEMsT0FBTyxFQUFFLEtBQUs7UUFDZCxRQUFRLEVBQUUsU0FBUztRQUNuQixJQUFJLEVBQUUsY0FBYztRQUNwQixJ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
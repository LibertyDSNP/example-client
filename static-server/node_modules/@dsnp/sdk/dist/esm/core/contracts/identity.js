var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { requireGetProvider, MissingProvider, MissingContract, requireGetSigner, getContracts, } from "../../config";
import { BeaconFactory__factory, Identity__factory, IdentityCloneFactory__factory, } from "../../types/typechain";
import { createTypedData, } from "./utilities";
import { getContractAddress } from "./contract";
const IDENTITY_CLONE_FACTORY_CONTRACT = "IdentityCloneFactory";
const IDENTITY_CONTRACT = "Identity";
const BEACON_FACTORY_CONTRACT = "BeaconFactory";
const BEACON_CONTRACT = "Beacon";
export var DelegationRole;
(function (DelegationRole) {
    DelegationRole[DelegationRole["NONE"] = 0] = "NONE";
    DelegationRole[DelegationRole["OWNER"] = 1] = "OWNER";
    DelegationRole[DelegationRole["ANNOUNCER"] = 2] = "ANNOUNCER";
})(DelegationRole || (DelegationRole = {}));
export var Permission;
(function (Permission) {
    Permission[Permission["NONE"] = 0] = "NONE";
    Permission[Permission["ANNOUNCE"] = 1] = "ANNOUNCE";
    Permission[Permission["OWNERSHIP_TRANSFER"] = 2] = "OWNERSHIP_TRANSFER";
    Permission[Permission["DELEGATE_ADD"] = 3] = "DELEGATE_ADD";
    Permission[Permission["DELEGATE_REMOVE"] = 4] = "DELEGATE_REMOVE";
})(Permission || (Permission = {}));
export const createCloneProxy = (logic, opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (!logic)
        logic = yield getIdentityLogicContractAddress(opts);
    const contract = yield getIdentityCloneFactoryContract(opts);
    return contract.createCloneProxy(logic);
});
export const createCloneProxyWithOwner = (owner, logic, opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (!logic)
        logic = yield getIdentityLogicContractAddress(opts);
    const contract = yield getIdentityCloneFactoryContract(opts);
    return contract.createCloneProxyWithOwner(logic, owner);
});
export const createBeaconProxy = (beacon, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getBeaconFactoryContract(opts);
    return contract["createBeaconProxy(address)"](beacon);
});
export const createBeaconProxyWithOwner = (owner, beacon, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = yield getBeaconFactoryContract(opts);
    return contract.createBeaconProxyWithOwner(beacon, owner);
});
export const createAndRegisterBeaconProxy = (userAddress, handle, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const beaconFactory = yield getBeaconFactoryContract(opts);
    const beaconAddr = yield getBeaconAddress(opts);
    return yield beaconFactory.createAndRegisterBeaconProxy(beaconAddr, userAddress, handle);
});
const getIdentityLogicContractAddress = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { identityLogic } = getContracts(opts);
    const provider = requireGetProvider(opts);
    const address = identityLogic || (yield getContractAddress(provider, IDENTITY_CONTRACT));
    if (!address)
        throw MissingContract;
    return address;
});
const getIdentityCloneFactoryContract = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { identityCloneFactory } = getContracts(opts);
    const signer = requireGetSigner(opts);
    const provider = requireGetProvider(opts);
    const address = identityCloneFactory || (yield getContractAddress(provider, IDENTITY_CLONE_FACTORY_CONTRACT));
    if (!address)
        throw MissingContract;
    return IdentityCloneFactory__factory.connect(address, signer);
});
const getBeaconFactoryContract = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { beaconFactory } = getContracts(opts);
    const signer = requireGetSigner(opts);
    const provider = requireGetProvider(opts);
    const address = beaconFactory || (yield getContractAddress(provider, BEACON_FACTORY_CONTRACT));
    if (!address)
        throw MissingContract;
    return BeaconFactory__factory.connect(address, signer);
});
export const isAuthorizedTo = (address, contractAddress, permission, blockNumber, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = requireGetProvider(opts);
    if (!provider)
        throw MissingProvider;
    return Identity__factory.connect(contractAddress, provider).isAuthorizedTo(address, permission, blockNumber);
});
const getBeaconAddress = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { beacon } = getContracts(opts);
    const provider = requireGetProvider(opts);
    const address = beacon || (yield getContractAddress(provider, BEACON_CONTRACT));
    if (!address)
        throw MissingContract;
    return address;
});
export const getDomainSeparator = (contractAddress, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = requireGetProvider(opts);
    return {
        name: "Identity",
        version: "1",
        chainId: (yield provider.getNetwork()).chainId,
        verifyingContract: contractAddress,
        salt: "0xa0bec69846cdcc8c1ba1eb93be1c5728385a9e26062a73e238b1beda189ac4c9",
    };
});
export const createAddDelegateEip712TypedData = (contractAddress, message, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const primaryType = "DelegateAdd";
    const addDelegateType = [
        { name: "nonce", type: "uint32" },
        { name: "delegateAddr", type: "address" },
        { name: "role", type: "uint8" },
    ];
    const delegateAddMessage = Object.assign({ nonce: message.nonce || (yield getNonceForDelegate(contractAddress, message.delegateAddr)) }, message);
    const domainData = yield getDomainSeparator(contractAddress, opts);
    return createTypedData(domainData, primaryType, delegateAddMessage, { DelegateAdd: addDelegateType });
});
export const getNonceForDelegate = (contractAddress, delegateAddress, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = requireGetProvider(opts);
    return yield Identity__factory.connect(contractAddress, provider).getNonceForDelegate(delegateAddress);
});
export const upsertDelegateBySignature = (contractAddress, signature, message, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const signer = requireGetSigner(opts);
    const provider = requireGetProvider(opts);
    const { v, r, s } = signature;
    const contract = yield Identity__factory.connect(contractAddress, provider);
    return contract.connect(signer).delegateByEIP712Sig(v, r, s, message);
});
export const upsertDelegate = (contractAddress, address, role, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const signer = requireGetSigner(opts);
    const provider = requireGetProvider(opts);
    const contract = yield Identity__factory.connect(contractAddress, provider);
    return contract.connect(signer).delegate(address, role);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9jb250cmFjdHMvaWRlbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsT0FBTyxFQUVMLGtCQUFrQixFQUNsQixlQUFlLEVBQ2YsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixZQUFZLEdBQ2IsTUFBTSxjQUFjLENBQUM7QUFFdEIsT0FBTyxFQUdMLHNCQUFzQixFQUN0QixpQkFBaUIsRUFDakIsNkJBQTZCLEdBQzlCLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUlMLGVBQWUsR0FHaEIsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRWhELE1BQU0sK0JBQStCLEdBQUcsc0JBQXNCLENBQUM7QUFDL0QsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUM7QUFDckMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDaEQsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDO0FBS2pDLE1BQU0sQ0FBTixJQUFZLGNBSVg7QUFKRCxXQUFZLGNBQWM7SUFDeEIsbURBQVUsQ0FBQTtJQUNWLHFEQUFXLENBQUE7SUFDWCw2REFBZSxDQUFBO0FBQ2pCLENBQUMsRUFKVyxjQUFjLEtBQWQsY0FBYyxRQUl6QjtBQUVELE1BQU0sQ0FBTixJQUFZLFVBTVg7QUFORCxXQUFZLFVBQVU7SUFDcEIsMkNBQUksQ0FBQTtJQUNKLG1EQUFRLENBQUE7SUFDUix1RUFBa0IsQ0FBQTtJQUNsQiwyREFBWSxDQUFBO0lBQ1osaUVBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTlcsVUFBVSxLQUFWLFVBQVUsUUFNckI7QUFTRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFPLEtBQXVCLEVBQUUsSUFBaUIsRUFBZ0MsRUFBRTtJQUNqSCxJQUFJLENBQUMsS0FBSztRQUFFLEtBQUssR0FB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
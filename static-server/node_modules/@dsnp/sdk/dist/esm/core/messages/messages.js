var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ethers } from "ethers";
import { requireGetSigner } from "../../config";
import { sortObject } from "../utilities/json";
export var DSNPType;
(function (DSNPType) {
    DSNPType[DSNPType["GraphChange"] = 1] = "GraphChange";
    DSNPType[DSNPType["Broadcast"] = 2] = "Broadcast";
    DSNPType[DSNPType["Reply"] = 3] = "Reply";
    DSNPType[DSNPType["Reaction"] = 4] = "Reaction";
    DSNPType[DSNPType["Profile"] = 5] = "Profile";
})(DSNPType || (DSNPType = {}));
export const createBroadcastMessage = (fromId, url, hash) => ({
    dsnpType: DSNPType.Broadcast,
    contentHash: hash,
    fromId,
    url,
});
export const createReplyMessage = (fromId, url, hash, inReplyTo) => ({
    dsnpType: DSNPType.Reply,
    contentHash: hash,
    fromId,
    inReplyTo,
    url,
});
export const createReactionMessage = (fromId, emoji, inReplyTo) => ({
    dsnpType: DSNPType.Reaction,
    emoji,
    fromId,
    inReplyTo,
});
export var DSNPGraphChangeType;
(function (DSNPGraphChangeType) {
    DSNPGraphChangeType[DSNPGraphChangeType["Follow"] = 1] = "Follow";
    DSNPGraphChangeType[DSNPGraphChangeType["Unfollow"] = 2] = "Unfollow";
})(DSNPGraphChangeType || (DSNPGraphChangeType = {}));
export const createFollowGraphChangeMessage = (fromId, followeeId) => ({
    fromId,
    dsnpType: DSNPType.GraphChange,
    changeType: DSNPGraphChangeType.Follow,
    objectId: followeeId,
});
export const createUnfollowGraphChangeMessage = (fromId, followeeId) => ({
    fromId,
    dsnpType: DSNPType.GraphChange,
    changeType: DSNPGraphChangeType.Unfollow,
    objectId: followeeId,
});
export const serialize = (message) => {
    const sortedMessage = sortObject(message);
    let serialization = "";
    for (const key in sortedMessage) {
        serialization = `${serialization}${key}${sortedMessage[key]}`;
    }
    return serialization;
};
export const createProfileMessage = (fromId, url, hash) => ({
    dsnpType: DSNPType.Profile,
    contentHash: hash,
    fromId,
    url,
});
export const sign = (message, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const signer = requireGetSigner(opts);
    const signature = yield signer.signMessage(serialize(message));
    return Object.assign(Object.assign({}, message), { signature });
});
export const recoverPublicKey = (message, signature) => {
    return ethers.utils.verifyMessage(serialize(message), signature);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9tZXNzYWdlcy9tZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWhDLE9BQU8sRUFBYyxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFNL0MsTUFBTSxDQUFOLElBQVksUUFNWDtBQU5ELFdBQVksUUFBUTtJQUNsQixxREFBZSxDQUFBO0lBQ2YsaURBQWEsQ0FBQTtJQUNiLHlDQUFTLENBQUE7SUFDVCwrQ0FBWSxDQUFBO0lBQ1osNkNBQVcsQ0FBQTtBQUNiLENBQUMsRUFOVyxRQUFRLEtBQVIsUUFBUSxRQU1uQjtBQWdDRCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUUsSUFBZSxFQUFvQixFQUFFLENBQUMsQ0FBQztJQUN6RyxRQUFRLEVBQUUsUUFBUSxDQUFDLFNBQVM7SUFDNUIsV0FBVyxFQUFFLElBQUk7SUFDakIsTUFBTTtJQUNOLEdBQUc7Q0FDSixDQUFDLENBQUM7QUFzQkgsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxNQUFjLEVBQUUsR0FBVyxFQUFFLElBQWUsRUFBRSxTQUFpQixFQUFnQixFQUFFLENBQUMsQ0FBQztJQUNwSCxRQUFRLEVBQUUsUUFBUSxDQUFDLEtBQUs7SUFDeEIsV0FBVyxFQUFFLElBQUk7SUFDakIsTUFBTTtJQUNOLFNBQVM7SUFDVCxHQUFHO0NBQ0osQ0FBQyxDQUFDO0FBb0JILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsTUFBYyxFQUFFLEtBQWEsRUFBRSxTQUFpQixFQUFtQixFQUFFLENBQUMsQ0FBQztJQUMzRyxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7SUFDM0IsS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0NBQ1YsQ0FBQyxDQUFDO0FBS0gsTUFBTSxDQUFOLElBQVksbUJBR1g7QUFIRCxXQUFZLG1CQUFtQjtJQUM3QixpRUFBVSxDQUFBO0lBQ1YscUVBQVksQ0FBQTtBQUNkLENBQUMsRUFIVyxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBRzlCO0FBbUJELE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQUMsTUFBYyxFQUFFLFVBQWtCLEVBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLE1BQU07SUFDTixRQUFRLEVBQUUsUUFBUSxDQUFDLFdBQVc7SUFDOUIsVUFBVSxFQUFFLG1CQUFtQixDQUFDLE1BQU07SUFDdEMsUUFBUSxFQUFFLFVBQVU7Q0FDckIsQ0FBQyxDQUFDO0FBVUgsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUcsQ0FBQyxNQUFjLEVBQUUsVUFBa0IsRUFBc0IsRUFBRSxDQUFDLENBQUM7SUFDM0csTUFBTTtJQUNOLFFBQVEsRUFBRSxRQUFRLENBQUMsV0FBVztJQUM5QixVQUFVLEVBQUUsbUJBQW1CLENBQUMsUUFBUTtJQUN4QyxRQUFRLEVBQUUsVUFBVTtDQUNyQixDQUFDLENBQUM7QUFRSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxPQUFvQixFQUFVLEVBQUU7SUFDeEQsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFFLE9BQThDLENBQUMsQ0FBQztJQUNsRixJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUM7SUFFdkIsS0FBSyxNQUFNLEdBQUcsSUFBSSxhQUFhLEVBQUU7UUFDL0IsYUFBYSxHQUFHLEdBQUcsYUFBYSxHQUFHLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztLQUMvRDtJQUVELE9BQU8sYUFBYSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQztBQW1CRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUUsSUFBZSxFQUFrQixFQUFFLENBQUMsQ0FBQztJQUNyRyxRQUFRLEVBQUUsUUFBUSxDQUFDLE9BQU87SUFDMUIsV0FBVyxFQUFFLElBQUk7SUFDakIsTUFBTTtJQUNOLEdBQUc7Q0FDSixDQUFDLENBQUM7QUFZSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBOEIsT0FBVSxFQUFFLElBQWlCLEVBQWlDLEVBQUU7SUFDaEgsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQy9ELHVDQUNLLE9BQU8sS0FDVixTQUFTLElBQ1Q7QUFDSixDQUFDLENBQUEsQ0FBQztBQVVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsT0FBb0IsRUFBRSxTQUFvQixFQUFhLEVBQUU7SUFDeEYsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDIn0=
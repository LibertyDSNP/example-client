import { DSNPType } from "../messages/messages";
export const BroadcastSchema = {
    dsnpType: { type: "INT32" },
    contentHash: { type: "BYTE_ARRAY" },
    fromId: { type: "BYTE_ARRAY" },
    url: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
export const BroadcastBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }],
};
export const ReplySchema = {
    dsnpType: { type: "INT32" },
    contentHash: { type: "BYTE_ARRAY" },
    fromId: { type: "BYTE_ARRAY" },
    inReplyTo: { type: "BYTE_ARRAY" },
    url: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
export const ReplyBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }, { column: "inReplyTo" }],
};
export const GraphChangeSchema = {
    dsnpType: { type: "INT32" },
    fromId: { type: "BYTE_ARRAY" },
    changeType: { type: "INT32" },
    signature: { type: "BYTE_ARRAY" },
};
export const GraphChangeBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }],
};
export const ProfileSchema = {
    dsnpType: { type: "INT32" },
    fromId: { type: "BYTE_ARRAY" },
    url: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
export const ProfileBloomFilterOptions = {
    bloomFilters: [{ column: "fromId" }],
};
export const ReactionSchema = {
    dsnpType: { type: "INT32" },
    emoji: { type: "BYTE_ARRAY" },
    fromId: { type: "BYTE_ARRAY" },
    inReplyTo: { type: "BYTE_ARRAY" },
    signature: { type: "BYTE_ARRAY" },
};
export const ReactionBloomFilterOptions = {
    bloomFilters: [{ column: "emoji" }, { column: "fromId" }, { column: "inReplyTo" }],
};
export const getSchemaFor = (dsnpType) => {
    switch (dsnpType) {
        case DSNPType.GraphChange:
            return GraphChangeSchema;
        case DSNPType.Broadcast:
            return BroadcastSchema;
        case DSNPType.Reply:
            return ReplySchema;
        case DSNPType.Reaction:
            return ReactionSchema;
        case DSNPType.Profile:
            return ProfileSchema;
    }
    throw new Error(`Invalid DSNP type: ${dsnpType}`);
};
export const getBloomFilterOptionsFor = (dsnpType) => {
    switch (dsnpType) {
        case DSNPType.GraphChange:
            return GraphChangeBloomFilterOptions;
        case DSNPType.Broadcast:
            return BroadcastBloomFilterOptions;
        case DSNPType.Reply:
            return ReplyBloomFilterOptions;
        case DSNPType.Reaction:
            return ReactionBloomFilterOptions;
        case DSNPType.Profile:
            return ProfileBloomFilterOptions;
    }
    throw new Error(`Invalid DSNP type: ${dsnpType}`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFycXVldFNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2JhdGNoL3BhcnF1ZXRTY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBMEJoRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7SUFDN0IsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUMzQixXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFO0lBQ25DLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDOUIsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtJQUMzQixTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFO0NBQ2xDLENBQUM7QUFLRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBdUI7SUFDN0QsWUFBWSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7Q0FDckMsQ0FBQztBQUtGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRztJQUN6QixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0lBQzNCLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDbkMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtJQUM5QixTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFO0lBQ2pDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDM0IsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtDQUNsQyxDQUFDO0FBS0YsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUc7SUFDckMsWUFBWSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFN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
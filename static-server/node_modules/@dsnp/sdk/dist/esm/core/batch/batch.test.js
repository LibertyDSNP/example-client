var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ParquetReader, ParquetWriter } from "@dsnp/parquetjs";
import * as batch from "./batch";
import { generateBroadcast, generateReply } from "../../generators/dsnpGenerators";
import { BroadcastSchema } from "./parquetSchema";
import TestStore from "../../test/testStore";
import { MixedTypeBatchError, EmptyBatchError } from "../utilities";
describe("batch", () => {
    describe("includes", () => {
        let reader;
        beforeEach(() => {
            const MockSplitBlockBloomFilter = {
                check: jest.fn(),
            };
            const bloomFilterData = {
                name: [
                    {
                        sbbf: MockSplitBlockBloomFilter,
                        columnName: "name",
                        rowGroupIndex: 0,
                    },
                ],
            };
            reader = { getBloomFilters: jest.fn().mockResolvedValue(bloomFilterData) };
        });
        it("calls getBloomFilter", () => {
            batch.includes(reader, "name", "banana");
            expect(reader.getBloomFilters.mock.calls.length).toBe(1);
        });
    });
    describe("#writeBatch", () => {
        const parquetWriterInstance = {
            appendRow: jest.fn().mockImplementation((message) => __awaiter(void 0, void 0, void 0, function* () { return message; })),
            close: jest.fn(),
        };
        const writeStream = { write: jest.fn(), end: jest.fn() };
        const { writeBatch } = batch;
        beforeAll(() => {
            jest.spyOn(ParquetWriter, "openStream").mockResolvedValue(parquetWriterInstance);
        });
        beforeEach(jest.clearAllMocks);
        afterAll(jest.restoreAllMocks);
        describe("when passed a valid message iterator", () => {
            const messages = [Object.assign(Object.assign({}, generateBroadcast()), { signature: "0xfa1ce" })];
            it("calls ParquetWriter#openStream to start a writable stream", () => __awaiter(void 0, void 0, void 0, function* () {
                yield writeBatch(writeStream, BroadcastSchema, messages);
                expect(ParquetWriter.openStream).toHaveBeenCalled();
            }));
            it("calls ParquetWriter#appendRow to add a row to parquet stream", () => __awaiter(void 0, void 0, void 0, function* () {
                yield writeBatch(writeStream, BroadcastSchema, messages);
                expect(parquetWriterInstance.appendRow).toHaveBeenCalledTimes(1);
            }));
            it("calls ParquetWriter#close to end the stream", () => __awaiter(void 0, void 0, void 0, function* () {
                yield writeBatch(writeStream, BroadcastSchema, messages);
                expect(parquetWriterInstance.close).toHaveBeenCalledTimes(1);
            }));
        });
        describe("when passed a message iterator containing multiple DSNP types", () => {
            const badMessages = [
                Object.assign(Object.assign({}, generateBroadcast()), { signature: "0xfa1ce" }),
                Object.assign(Object.assign({}, generateReply()), { signature: "0xfa1ce" }),
            ];
            it("throws MixedDSNPTypeError", () => __awaiter(void 0, void 0, void 0, function* () {
                yield expect(writeBatch(writeStream, BroadcastSchema, badMessages)).rejects.toBeInstanceOf(MixedTypeBatchError);
            }));
            it("includes the write stream handle in the thrown error", () => __awaiter(void 0, void 0, void 0, function* () {
                yield expect(writeBatch(writeStream, BroadcastSchema, badMessages)).rejects.toMatchObject({
                    fileHandle: writeStream,
                });
            }));
        });
        describe("when passed a message iterator containing no messages", () => {
            const badMessages = [];
            it("throws MixedDSNPTypeError", () => __awaiter(void 0, void 0, void 0, function* () {
                yield expect(writeBatch(writeStream, BroadcastSchema, badMessages)).rejects.toBeInstanceOf(EmptyBatchError);
            }));
            it("includes the write stream handle in the thrown error", () => __awaiter(void 0, void 0, void 0, function* () {
                yield expect(writeBatch(writeStream, BroadcastSchema, badMessages)).rejects.toMatchObject({
                    fileHandle: writeStream,
                });
            }));
        });
    });
    describe("#createFile", () => {
        const { createFile } = batch;
        const messages = [Object.assign(Object.assign({}, generateBroadcast()), { signature: "0xfa1ce" })];
        describe("when passed a valid message iterator", () => {
            it("calls putStream to start streaming", () => __awaiter(void 0, void 0, void 0, function* () {
                const mockStore = new TestStore();
                jest.spyOn(mockStore, "putStream");
                yield createFile("batch.parquet", messages, { store: mockStore });
                expect(mockStore.putStream).toHaveBeenCalled();
            }));
            it("calls #writeBatch to stream write parquet", () => __awaiter(void 0, void 0, void 0, function* () {
                jest.spyOn(batch, "writeBatch");
                const mockStore = new TestStore();
                yield createFile("batch.parquet", messages, { store: mockStore });
                const file = mockStore.getStore()["batch.parquet"];
                const reader = yield ParquetReader.openBuffer(file);
                expect(batch.writeBatch).toHaveBeenCalled();
                expect(reader.metadata.num_rows.buffer.toString("hex")).toEqual("0000000000000001");
            }));
        });
        describe("when passed a message iterator containing no messages", () => {
            const badMessages = [];
            it("throws MixedDSNPTypeError", () => __awaiter(void 0, void 0, void 0, function* () {
                const mockStore = new TestStore();
                yield expect(createFile("batch.parquet", badMessages, { store: mockStore })).rejects.toBeInstanceOf(EmptyBatchError);
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2JhdGNoL2JhdGNoLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvRCxPQUFPLEtBQUssS0FBSyxNQUFNLFNBQVMsQ0FBQztBQUVqQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbkYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sU0FBUyxNQUFNLHNCQUFzQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEUsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7SUFDckIsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDeEIsSUFBSSxNQUE0QixDQUFDO1FBRWpDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxNQUFNLHlCQUF5QixHQUFHO2dCQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTthQUNqQixDQUFDO1lBRUYsTUFBTSxlQUFlLEdBQUc7Z0JBQ3RCLElBQUksRUFBRTtvQkFDSjt3QkFDRSxJQUFJLEVBQUUseUJBQXlCO3dCQUMvQixVQUFVLEVBQUUsTUFBTTt3QkFDbEIsYUFBYSxFQUFFLENBQUM7cUJBQ2pCO2lCQUNGO2FBQ0YsQ0FBQztZQUVGLE1BQU0sR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUM3RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7WUFDOUIsS0FBSyxDQUFDLFFBQVEs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
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ethers } from "ethers";
import * as config from "./config";
import { createBroadcastMessage, createReplyMessage, createReactionMessage, sign } from "./core/messages";
import { createPublication, createPublications } from "./createPublication";
import TestStore from "./test/testStore";
import { EmptyBatchError } from "./core/utilities";
describe("createPublication", () => {
    let store;
    const messages = [
        createBroadcastMessage("dsnp://0123456789ABCDEF", "https://dsnp.org", "0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
    ];
    beforeEach(() => {
        jest.setTimeout(12000);
        store = new TestStore();
        config.setConfig({
            currentFromId: "dsnp://0123456789ABCDEF",
            signer: new ethers.Wallet("0xd98d551044eb9ef4c9a2afd1d9c95646e22b710da55c8dc95431038d5544d804"),
            store: store,
        });
    });
    describe("when passed a valid message iterator", () => {
        it("returns an publications for the passed in messages", () => __awaiter(void 0, void 0, void 0, function* () {
            const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield sign(msg); })));
            const publications = yield createPublication(signedMessages);
            expect(publications).toMatchObject({
                dsnpType: 2,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            });
        }));
        it("stores the messages provided at the returned URL", () => __awaiter(void 0, void 0, void 0, function* () {
            const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield sign(msg); })));
            const publication = yield createPublication(signedMessages);
            const filename = publication.url.split(".org/")[1];
            const files = store.getStore();
            expect(files[filename].toString()).toMatchSnapshot();
        }));
    });
    describe("when passed a message iterator containing no messages", () => {
        const badMessages = [];
        it("throws MixedDSNPTypeError", () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(createPublication(badMessages)).rejects.toBeInstanceOf(EmptyBatchError);
        }));
    });
});
describe("createPublications", () => {
    let store;
    const messages = [
        createBroadcastMessage("dsnp://0123456789ABCDEF", "https://dsnp.org", "0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        createBroadcastMessage("dsnp://0123456789ABCDE0", "https://dsnp.org", "0x1123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        createReplyMessage("dsnp://0123456789ABCDEF", "https://dsnp.org", "0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF", "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        createReactionMessage("dsnp://0123456789ABCDEF", "🏳️‍🌈", "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
        createReactionMessage("dsnp://0123456789ABCDEF", "🏳️‍🌈", "dsnp://0123456789ABCDE0/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"),
    ];
    beforeEach(() => {
        jest.setTimeout(12000);
        store = new TestStore();
        config.setConfig({
            currentFromId: "dsnp://0123456789ABCDEF",
            signer: new ethers.Wallet("0xd98d551044eb9ef4c9a2afd1d9c95646e22b710da55c8dc95431038d5544d804"),
            store: store,
        });
    });
    it("returns an array of valid publications for each message type", () => __awaiter(void 0, void 0, void 0, function* () {
        const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield sign(msg); })));
        const publications = yield createPublications(signedMessages);
        expect(publications).toMatchObject([
            {
                dsnpType: 2,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            },
            {
                dsnpType: 3,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            },
            {
                dsnpType: 4,
                hash: expect.stringMatching(/[a-z0-9]{64}/),
                url: expect.stringMatching(/http:\/\/fakestore\.org\/[a-z0-9]{32}/),
            },
        ]);
    }));
    it("stores the messages provided at the returned URL", () => __awaiter(void 0, void 0, void 0, function* () {
        const signedMessages = yield Promise.all(messages.map((msg) => __awaiter(void 0, void 0, void 0, function* () { return yield sign(msg); })));
        const publications = yield createPublications(signedMessages);
        for (const publication of publications) {
            const filename = publication.url.split(".org/")[1];
            const files = store.getStore();
            expect(files[filename].toString()).toMatchSnapshot();
        }
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUHVibGljYXRpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jcmVhdGVQdWJsaWNhdGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFaEMsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFFbkMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVFLE9BQU8sU0FBUyxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVuRCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksS0FBZ0IsQ0FBQztJQUNyQixNQUFNLFFBQVEsR0FBRztRQUNmLHNCQUFzQixDQUNwQix5QkFBeUIsRUFDekIsa0JBQWtCLEVBQ2xCLG9RQUFvUSxDQUNyUTtLQUNGLENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QixLQUFLLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUV4QixNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ2YsYUFBYSxFQUFFLHlCQUF5QjtZQUN4QyxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLG9FQUFvRSxDQUFDO1lBQy9GLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELEVBQUUsQ0FBQyxvREFBb0Qs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
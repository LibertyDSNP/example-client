var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getDSNPRegistryUpdateEvents, resolveRegistration } from "./core/contracts/registry";
import { createAndRegisterBeaconProxy } from "./core/contracts/identity";
import { findEvent } from "./core/contracts/contract";
import { convertBigNumberToDSNPUserId } from "./core/utilities/identifiers";
export const createRegistration = (addr, handle, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const txn = yield createAndRegisterBeaconProxy(addr, handle, opts);
    const receipt = yield txn.wait(1);
    const registerEvent = findEvent("DSNPRegistryUpdate", receipt.logs);
    return convertBigNumberToDSNPUserId(registerEvent.args[0]);
});
export const resolveHandle = (handle, opts) => resolveRegistration(handle, opts);
export const resolveId = (dsnpUserId, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const registrations = yield getDSNPRegistryUpdateEvents({
        dsnpUserId,
    }, opts);
    if (registrations.length === 0)
        return null;
    return registrations[registrations.length - 1];
});
export const availabilityFilter = (handles, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const availability = yield Promise.all(handles.map((handle) => isAvailable(handle, opts)));
    return handles.filter((_handle, index) => availability[index]);
});
export const isAvailable = (handle, opts) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield resolveRegistration(handle, opts)) === null;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oYW5kbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLE9BQU8sRUFBd0IsMkJBQTJCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuSCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDdEQsT0FBTyxFQUFFLDRCQUE0QixFQUFjLE1BQU0sOEJBQThCLENBQUM7QUFZeEYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FDaEMsSUFBZSxFQUNmLE1BQWMsRUFDZCxJQUF3QixFQUNILEVBQUU7SUFDdkIsTUFBTSxHQUFHLEdBQUcsTUFBTSw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25FLE1BQU0sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsQyxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BFLE9BQU8sNEJBQTRCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQSxDQUFDO0FBU0YsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBYyxFQUFFLElBQXdCLEVBQWdDLEVBQUUsQ0FDdEcsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBU3BDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFPLFVBQXNCLEVBQUUsSUFBd0IsRUFBZ0MsRUFBRTtJQUNoSCxNQUFNLGFBQWEsR0FBRyxNQUFNLDJCQUEyQixDQUNyRDtRQUNFLFVBQVU7S0FDWCxFQUNELElBQUksQ0FDTCxDQUFDO0lBQ0YsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUM1QyxPQUFPLGFBQWEsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQSxDQUFDO0FBU0YsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBTyxPQUFpQixFQUFFLElBQXdCLEVBQXFCLEVBQUU7SUFDekcsTUFBTSxZQUFZLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNGLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQSxDQUFDO0FBU0YsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQU8sTUFBYyxFQUFFLElBQXdCLEVBQW9CLEVBQUU7SUFDOUYsT0FBTyxDQUFDLE1BQU0sbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDO0FBQzVELENBQUMsQ0FBQSxDQUFDIn0=
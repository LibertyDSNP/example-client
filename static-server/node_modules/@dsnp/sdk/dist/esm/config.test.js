var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { providers, Wallet } from "ethers";
import { getConfig, setConfig, MissingStore, MissingSigner, MissingProvider, requireGetCurrentFromId, requireGetProvider, requireGetSigner, requireGetStore, MissingUser, } from "./config";
import TestStore from "./test/testStore";
describe("config", () => {
    describe("#getConfig", () => {
        it("fetches the current config settings", () => {
            const testConfig = {
                test: "object",
            };
            setConfig(testConfig);
            expect(getConfig()).toMatchObject({ test: "object" });
        });
        it("overrides the returned settings with any provided parameters", () => {
            const testConfig = {
                test: "object",
            };
            setConfig(testConfig);
            expect(getConfig({
                otherTest: "differentObject",
            })).toMatchObject({
                test: "object",
                otherTest: "differentObject",
            });
        });
    });
    describe("#setConfig", () => {
        it("updates the config settings", () => __awaiter(void 0, void 0, void 0, function* () {
            const testConfig = {
                test: "object",
            };
            setConfig(testConfig);
            expect(getConfig()).toMatchObject({ test: "object" });
        }));
        it("does not remove existing keys in the config settings", () => __awaiter(void 0, void 0, void 0, function* () {
            setConfig({
                other_test: "blah blah",
            });
            const testConfig = {
                test: "object",
            };
            setConfig(testConfig);
            expect(getConfig()).toMatchObject({ other_test: "blah blah", test: "object" });
        }));
    });
    describe("requireGetters", () => {
        const badConfig = getConfig();
        it("requireGetSigner works", () => {
            expect(() => requireGetSigner(badConfig)).toThrow(MissingSigner);
            const signer = Wallet.createRandom();
            expect(requireGetSigner({ signer: signer })).toBeInstanceOf(Object);
        });
        it("requireGetProvider works", () => {
            expect(() => requireGetProvider(badConfig)).toThrow(MissingProvider);
            const testProvider = new providers.JsonRpcProvider("http://localhost:8383");
            expect(requireGetProvider({ provider: testProvider })).toBeInstanceOf(Object);
        });
        it("requireGetStore works", () => {
            expect(() => requireGetStore(badConfig)).toThrow(MissingStore);
            const testStore = new TestStore();
            expect(requireGetStore({ store: testStore })).toBeInstanceOf(Object);
        });
        it("requireGetCurrentFromId", () => {
            expect(() => requireGetCurrentFromId(badConfig)).toThrow(MissingUser);
            const testRegistration = "0xabcd1234";
            expect(requireGetCurrentFromId({ currentFromId: testRegistration })).toEqual(testRegistration);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDM0MsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBRVQsWUFBWSxFQUNaLGFBQWEsRUFDYixlQUFlLEVBQ2YsdUJBQXVCLEVBQ3ZCLGtCQUFrQixFQUNsQixnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLFdBQVcsR0FDWixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLFNBQVMsTUFBTSxrQkFBa0IsQ0FBQztBQUV6QyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtJQUN0QixRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUMxQixFQUFFLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1lBQzdDLE1BQU0sVUFBVSxHQUFJO2dCQUNsQixJQUFJLEVBQUUsUUFBUTthQUNPLENBQUM7WUFFeEIsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXRCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDhEQUE4RCxFQUFFLEdBQUcsRUFBRTtZQUN0RSxNQUFNLFVBQVUsR0FBSTtnQkFDbEIsSUFBSSxFQUFFLFFBQVE7YUFDTyxDQUFDO1lBRXhCLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUV0QixNQUFNLENBQ0osU0FBUyxDQUFFO2dCQUNULFNBQVMsRUFBRSxpQkFBaUI7YUFDUCxDQUFDLENBQ3pCLENBQUMsYUFBYSxDQUFDO2dCQUNkLElBQUksRUFBRSxRQUFRO2dCQUNkLFNBQVMsRUFBRSxpQkFBaUI7YUFDN0IsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFTLEVBQUU7WUFDM0MsTUFBTSxVQUFVLEdBQUk7Z0JBQ2xCLElBQUksRUFBRSxRQUFRO2FBQ08sQ0FBQztZQUV4QixTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFdEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzREFBc0QsRUFBRSxHQUFTLEVBQUU7WUFDcEUsU0FBUyxDQUFDO2dCQUNSLFVBQVUsRUFBRSxXQUFXO2FBQ3hCLENBQUMsQ0FBQztZQUVILE1BQU0sVUFBVSxHQUFJO2dCQUNsQixJQUFJLEVBQUUsUUFBUTthQUNPLENBQUM7WUFFeEIsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXRCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM5QixNQUFNLFNBQVMsR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUU5QixFQUFFLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVqRSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO1lBQ2xDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUVyRSxNQUFNLFlBQVksR0FBRyxJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUM1RSxNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7WUFDL0IsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUUvRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7WUFDakMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXRFLE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNqRyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==
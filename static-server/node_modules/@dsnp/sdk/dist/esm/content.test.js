var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ethers } from "ethers";
import { keccak256 } from "js-sha3";
import * as config from "./config";
import * as content from "./content";
import { DSNPType } from "./core/messages/messages";
import TestStore from "./test/testStore";
describe("content", () => {
    describe("broadcast", () => {
        describe("with a valid signer, storage adapter and user id", () => {
            let store;
            beforeEach(() => {
                store = new TestStore();
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: ethers.Wallet.createRandom(),
                    store: store,
                });
            });
            describe("with valid activity pub options", () => {
                it("uploads an activity pub object matching the provided specifications", () => __awaiter(void 0, void 0, void 0, function* () {
                    yield content.broadcast({
                        attributedTo: "John Doe <johndoe@sample.org>",
                        content: "Lorem ipsum delor blah blah blah",
                        name: "Lorem Ipsum",
                    });
                    const storeContents = store.getStore();
                    const keys = Object.keys(storeContents);
                    expect(keys.length).toEqual(1);
                    expect(storeContents[keys[0]]).toMatch(/\{"@context":"https:\/\/www\.w3\.org\/ns\/activitystreams","attributedTo":"John Doe <johndoe@sample\.org>","content":"Lorem ipsum delor blah blah blah","name":"Lorem Ipsum","published":"[0-9TZ\-:.]+","type":"Note"\}/);
                }));
                it("returns a broadcast DSNP message linking to the activity pub object", () => __awaiter(void 0, void 0, void 0, function* () {
                    const message = yield content.broadcast({
                        attributedTo: "John Doe <johndoe@sample.org>",
                        content: "Lorem ipsum delor blah blah blah",
                        name: "Lorem Ipsum",
                    });
                    const storeContents = store.getStore();
                    const keys = Object.keys(storeContents);
                    expect(keys.length).toEqual(1);
                    expect(message).toMatchObject({
                        fromId: "dsnp://0123456789ABCDEF",
                        dsnpType: DSNPType.Broadcast,
                        url: `http://fakestore.org/${keys[0]}`,
                        contentHash: keccak256(storeContents[keys[0]]),
                    });
                }));
            });
            describe("with invalid activity pub options", () => {
                it("throws InvalidActivityPubOpts", () => __awaiter(void 0, void 0, void 0, function* () {
                    yield expect(content.broadcast({
                        attributedTo: "John Doe <johndoe@sample.org>",
                        content: "Lorem ipsum delor blah blah blah",
                        name: "Lorem Ipsum",
                        published: "Yesterday",
                    })).rejects.toThrow(content.InvalidActivityPubOpts);
                }));
            });
        });
        describe("without a signer", () => {
            it("throws MissingStoreError", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: undefined,
                    store: new TestStore(),
                });
                yield expect(content.broadcast({
                    attributedTo: "John Doe <johndoe@sample.org>",
                    content: "Lorem ipsum delor blah blah blah",
                    name: "Lorem Ipsum",
                })).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a storage adapter", () => {
            it("throws MissingStoreError", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: ethers.Wallet.createRandom(),
                    store: undefined,
                });
                yield expect(content.broadcast({
                    attributedTo: "John Doe <johndoe@sample.org>",
                    content: "Lorem ipsum delor blah blah blah",
                    name: "Lorem Ipsum",
                })).rejects.toThrow(config.MissingStore);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer: ethers.Wallet.createRandom(),
                    store: new TestStore(),
                });
                yield expect(content.broadcast({
                    attributedTo: "John Doe <johndoe@sample.org>",
                    content: "Lorem ipsum delor blah blah blah",
                    name: "Lorem Ipsum",
                })).rejects.toThrow(config.MissingUser);
            }));
        });
    });
    describe("reply", () => {
        describe("with a valid signer, storage adapter and user id", () => {
            let store;
            beforeEach(() => {
                store = new TestStore();
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: ethers.Wallet.createRandom(),
                    store: store,
                });
            });
            describe("with valid activity pub options and a valid inReplyTo Id", () => {
                it("uploads an activity pub object matching the provided specifications", () => __awaiter(void 0, void 0, void 0, function* () {
                    yield content.reply({
                        attributedTo: "John Doe <johndoe@sample.org>",
                        content: "Lorem ipsum delor blah blah blah",
                        name: "Lorem Ipsum",
                        inReplyTo: "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF",
                    }, "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF");
                    const storeContents = store.getStore();
                    const keys = Object.keys(storeContents);
                    expect(keys.length).toEqual(1);
                    expect(storeContents[keys[0]]).toMatch(/\{"@context":"https:\/\/www\.w3\.org\/ns\/activitystreams","attributedTo":"John Doe <johndoe@sample\.org>","content":"Lorem ipsum delor blah blah blah","inReplyTo":"dsnp:\/\/0123456789ABCDEF\/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF","name":"Lorem Ipsum","published":"[0-9TZ\-:.]+","type":"Note"\}/);
                }));
                it("returns a reply DSNP message linking to the activity pub object", () => __awaiter(void 0, void 0, void 0, function* () {
                    const message = yield content.reply({
                        attributedTo: "John Doe <johndoe@sample.org>",
                        content: "Lorem ipsum delor blah blah blah",
                        name: "Lorem Ipsum",
                        inReplyTo: "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF",
                    }, "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF");
                    const storeContents = store.getStore();
                    const keys = Object.keys(storeContents);
                    expect(keys.length).toEqual(1);
                    expect(message).toMatchObject({
                        fromId: "dsnp://0123456789ABCDEF",
                        dsnpType: DSNPType.Reply,
                        url: `http://fakestore.org/${keys[0]}`,
                        contentHash: keccak256(storeContents[keys[0]]),
                        inReplyTo: "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF",
                    });
                }));
            });
            describe("with an invalid inReplyTo Id", () => {
                it("throws InvalidActivityPubOpts", () => __awaiter(void 0, void 0, void 0, function* () {
                    yield expect(content.reply({
                        attributedTo: "John Doe <johndoe@sample.org>",
                        content: "Lorem ipsum delor blah blah blah",
                        name: "Lorem Ipsum",
                        inReplyTo: "dsnp://badbadbad/badbadbadk",
                    }, "dsnp://badbadbad/badbadbad")).rejects.toThrow(content.InvalidInReplyTo);
                }));
            });
            describe("with invalid activity pub options", () => {
                it("throws InvalidActivityPubOpts", () => __awaiter(void 0, void 0, void 0, function* () {
                    yield expect(content.reply({
                        attributedTo: "John Doe <johndoe@sample.org>",
                        content: "Lorem ipsum delor blah blah blah",
                        name: "Lorem Ipsum",
                    }, "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF")).rejects.toThrow(content.InvalidActivityPubOpts);
                }));
            });
        });
        describe("without a signer", () => {
            it("throws MissingStoreError", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: undefined,
                    store: new TestStore(),
                });
                yield expect(content.reply({
                    attributedTo: "John Doe <johndoe@sample.org>",
                    content: "Lorem ipsum delor blah blah blah",
                    name: "Lorem Ipsum",
                    inReplyTo: "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF",
                }, "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF")).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a storage adapter", () => {
            it("throws MissingStoreError", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: ethers.Wallet.createRandom(),
                    store: undefined,
                });
                yield expect(content.reply({
                    attributedTo: "John Doe <johndoe@sample.org>",
                    content: "Lorem ipsum delor blah blah blah",
                    name: "Lorem Ipsum",
                    inReplyTo: "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF",
                }, "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF")).rejects.toThrow(config.MissingStore);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer: ethers.Wallet.createRandom(),
                    store: new TestStore(),
                });
                yield expect(content.reply({
                    attributedTo: "John Doe <johndoe@sample.org>",
                    content: "Lorem ipsum delor blah blah blah",
                    name: "Lorem Ipsum",
                    inReplyTo: "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF",
                }, "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF")).rejects.toThrow(config.MissingUser);
            }));
        });
    });
    describe("react", () => {
        describe("with a valid signer and user id", () => {
            beforeEach(() => {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: ethers.Wallet.createRandom(),
                });
            });
            it("returns a reaction DSNP message", () => __awaiter(void 0, void 0, void 0, function* () {
                const message = yield content.react("🏳️‍🌈", "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF");
                expect(message).toMatchObject({
                    fromId: "dsnp://0123456789ABCDEF",
                    dsnpType: DSNPType.Reaction,
                    emoji: "🏳️‍🌈",
                    inReplyTo: "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF",
                });
            }));
        });
        describe("without a signer", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: undefined,
                });
                yield expect(content.react("🏴‍☠️", "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF")).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer: ethers.Wallet.createRandom(),
                });
                yield expect(content.react("🏴‍☠️", "dsnp://0123456789ABCDEF/0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF")).rejects.toThrow(config.MissingUser);
            }));
        });
    });
    describe("profile", () => {
        describe("with a valid signer, storage adapter and user id", () => {
            let store;
            beforeEach(() => {
                store = new TestStore();
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: ethers.Wallet.createRandom(),
                    store: store,
                });
            });
            describe("with valid activity pub options", () => {
                it("uploads an activity pub object matching the provided specifications", () => __awaiter(void 0, void 0, void 0, function* () {
                    yield content.profile({
                        type: "Person",
                        name: "Rose Karr",
                        preferredUsername: "rosalinekarr",
                    });
                    const storeContents = store.getStore();
                    const keys = Object.keys(storeContents);
                    expect(keys.length).toEqual(1);
                    expect(storeContents[keys[0]]).toMatch(/\{"@context":"https:\/\/www\.w3\.org\/ns\/activitystreams","name":"Rose Karr","preferredUsername":"rosalinekarr","published":"[0-9TZ\-:.]+","type":"Person"\}/);
                }));
                it("returns a profile DSNP message linking to the activity pub object", () => __awaiter(void 0, void 0, void 0, function* () {
                    const message = yield content.profile({
                        type: "Person",
                        name: "Rose Karr",
                        preferredUsername: "rosalinekarr",
                    });
                    const storeContents = store.getStore();
                    const keys = Object.keys(storeContents);
                    expect(keys.length).toEqual(1);
                    expect(message).toMatchObject({
                        fromId: "dsnp://0123456789ABCDEF",
                        dsnpType: DSNPType.Profile,
                        url: `http://fakestore.org/${keys[0]}`,
                        contentHash: keccak256(storeContents[keys[0]]),
                    });
                }));
            });
            describe("with invalid activity pub options", () => {
                it("throws InvalidActivityPubOpts", () => __awaiter(void 0, void 0, void 0, function* () {
                    yield expect(content.profile({
                        type: "Note",
                        name: "Rose Karr",
                        preferredUsername: "rosalinekarr",
                    })).rejects.toThrow(content.InvalidActivityPubOpts);
                }));
            });
        });
        describe("without a signer", () => {
            it("throws MissingStoreError", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: undefined,
                    store: new TestStore(),
                });
                yield expect(content.profile({
                    type: "Person",
                    name: "Rose Karr",
                    preferredUsername: "rosalinekarr",
                })).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a storage adapter", () => {
            it("throws MissingStoreError", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0123456789ABCDEF",
                    signer: ethers.Wallet.createRandom(),
                    store: undefined,
                });
                yield expect(content.profile({
                    type: "Person",
                    name: "Rose Karr",
                    preferredUsername: "rosalinekarr",
                })).rejects.toThrow(config.MissingStore);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer: ethers.Wallet.createRandom(),
                    store: new TestStore(),
                });
                yield expect(content.profile({
                    type: "Person",
                    name: "Rose Karr",
                    preferredUsername: "rosalinekarr",
                })).rejects.toThrow(config.MissingUser);
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
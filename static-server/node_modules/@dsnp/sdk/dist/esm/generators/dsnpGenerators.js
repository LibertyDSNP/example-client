import * as fs from "fs";
import { DSNPType } from "../core/messages/messages";
import { generateHexString, randInt, sample } from "@dsnp/test-generators";
import { addresses, sampleText } from "@dsnp/test-generators/";
const PREFAB_URLS = sampleText.prefabURLs;
const generateEthereumAddress = addresses.generateEthereumAddress;
export const generateDSNPStream = (messageCount) => {
    const reactionReplyMax = 1000;
    const maxInt = reactionReplyMax * 10;
    return Array.from({ length: messageCount }, () => {
        const value = randInt(maxInt);
        let msg;
        if (value > reactionReplyMax) {
            msg = value % 2 === 0 ? generateReaction() : generateReply();
        }
        else {
            msg = generateBroadcast();
        }
        return msg;
    });
};
export const writeFixture = (data, jsonFilePath) => {
    const ws = fs.createWriteStream(jsonFilePath).on("error", (e) => {
        throw new Error("createWriteStream failed: \n" + e.toString());
    });
    const ok = true;
    let i = 0;
    const header = '{ "entries": [';
    ws.write(header);
    do {
        ws.write(data[i] + ",");
        i++;
    } while (i < data.length - 1 && ok);
    ws.write(data[data.length - 1]);
    ws.end("]}");
    return ws.bytesWritten;
};
export const generateBroadcast = (from) => {
    return {
        dsnpType: DSNPType.Broadcast,
        fromId: from ? from : generateEthereumAddress(),
        contentHash: generateHexString(64),
        url: sample(PREFAB_URLS),
    };
};
export const generateReply = (from) => {
    return {
        dsnpType: DSNPType.Reply,
        fromId: from ? from : generateEthereumAddress(),
        inReplyTo: generateHexString(64),
        contentHash: generateHexString(64),
        url: sample(PREFAB_URLS),
    };
};
export const generateReaction = (from) => {
    return {
        dsnpType: DSNPType.Reaction,
        fromId: from ? from : generateEthereumAddress(),
        emoji: generateHexString(20),
        inReplyTo: generateHexString(64),
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHNucEdlbmVyYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2VuZXJhdG9ycy9kc25wR2VuZXJhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixPQUFPLEVBQWlDLFFBQVEsRUFBaUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVuSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNFLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFL0QsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQztBQUMxQyxNQUFNLHVCQUF1QixHQUFHLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQztBQVNsRSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLFlBQW9CLEVBQXNCLEVBQUU7SUFFN0UsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFPOUIsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBRXJDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFBRSxHQUFHLEVBQUU7UUFDL0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLElBQUksR0FBZ0IsQ0FBQztRQUNyQixJQUFJLEtBQUssR0FBRyxnQkFBZ0IsRUFBRTtZQUU1QixHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQzlEO2FBQU07WUFDTCxHQUFHLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztTQUMzQjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxD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
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as fs from "fs";
import path from "path";
import parquet from "@dsnp/parquetjs";
import { generateBroadcast, generateReply, generateReaction } from "./dsnpGenerators";
import * as pq from "../core/batch/parquetSchema";
import { generateHexString } from "@dsnp/test-generators";
export const generateBatchBroadcast = (from) => {
    return Object.assign({ signature: generateHexString(256) }, generateBroadcast(from));
};
export const generateBatchReaction = (from) => {
    return Object.assign({ signature: generateHexString(256) }, generateReaction(from));
};
export const generateBatchReply = (from) => {
    return Object.assign({ signature: generateHexString(256) }, generateReply(from));
};
export const generateBroadcastBatchFile = (rootDir, numMessages) => __awaiter(void 0, void 0, void 0, function* () {
    return yield writeBatchFileWithOptions({
        rootDir: rootDir,
        numMessages: numMessages,
        schema: pq.BroadcastSchema,
        generator: generateBatchBroadcast,
        bloomOptions: pq.BroadcastBloomFilterOptions,
    });
});
export const generateReplyBatchFile = (rootDir, numMessages) => __awaiter(void 0, void 0, void 0, function* () {
    return yield writeBatchFileWithOptions({
        rootDir: rootDir,
        numMessages: numMessages,
        schema: pq.ReplySchema,
        generator: generateBatchReply,
        bloomOptions: pq.ReplyBloomFilterOptions,
    });
});
export const generateReactionBatchFile = (rootDir, numMessages) => __awaiter(void 0, void 0, void 0, function* () {
    return yield writeBatchFileWithOptions({
        rootDir: rootDir,
        numMessages: numMessages,
        schema: pq.ReactionSchema,
        generator: generateBatchReaction,
        bloomOptions: pq.ReactionBloomFilterOptions,
    });
});
const writeBatchFileWithOptions = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (opts.rootDir === "") {
        throw new Error("rootDir can't be blank");
    }
    ensureDir(opts.rootDir);
    const parquetFileName = ["replies", opts.numMessages, timestamp()].join("-") + ".parquet";
    const fname = path.join(opts.rootDir, parquetFileName);
    let itemsWritten = 0;
    try {
        const data = Array.from({ length: opts.numMessages }, () => opts.generator());
        const pSchema = new parquet.ParquetSchema(opts.schema);
        const writer = yield parquet.ParquetWriter.openFile(pSchema, fname, opts.bloomOptions);
        for (let i = 0; i < data.length; i++) {
            yield writer.appendRow(data[i]);
            itemsWritten++;
        }
        yield writer.close();
    }
    catch (e) {
        return { records: -1, path: fname, error: e.toString() };
    }
    return { records: itemsWritten, path: fname, error: "" };
});
const timestamp = () => {
    const now = new Date(Date.now());
    return [
        now.getUTCFullYear(),
        now.getUTCMonth(),
        now.getUTCDay(),
        "-",
        now.getUTCHours(),
        now.getUTCMinutes(),
        now.getUTCSeconds(),
        "-",
        now.getUTCMilliseconds(),
    ].join("");
};
const ensureDir = (dirname) => {
    if (!fs.existsSync(dirname)) {
        throw new Error(`directory does not exist: ${dirname}`);
    }
    else {
        const stats = fs.statSync(dirname);
        if (!stats.isDirectory()) {
            throw new Error(`is not a directory: ${dirname}`);
        }
    }
    return dirname;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2hGaWxlR2VuZXJhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nZW5lcmF0b3JzL2JhdGNoRmlsZUdlbmVyYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sT0FBTyxNQUFNLGlCQUFpQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RixPQUFPLEtBQUssRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR2xELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBZ0IxRCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLElBQXNCLEVBQXlCLEVBQUU7SUFDdEYsdUJBQVMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFLLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFHO0FBQzNFLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsSUFBc0IsRUFBd0IsRUFBRTtJQUNwRix1QkFBUyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUssZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUc7QUFDMUUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFzQixFQUFxQixFQUFFO0lBQzlFLHVCQUFTLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUc7QUFDdkUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FDeEMsT0FBZSxFQUNmLFdBQW1CLEVBQ1ks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
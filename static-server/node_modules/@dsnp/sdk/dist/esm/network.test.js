var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as config from "./config";
import * as network from "./network";
import { findEvent } from "./core/contracts/contract";
import { register } from "./core/contracts/registry";
import { DSNPGraphChangeType, DSNPType } from "./core/messages/messages";
import { Identity__factory } from "./types/typechain";
import { setupConfig } from "./test/sdkTestConfig";
import { revertHardhat, snapshotHardhat, setupSnapshot } from "./test/hardhatRPC";
import { convertBigNumberToDSNPUserId } from "./core/utilities/identifiers";
describe("network", () => {
    let registerId;
    setupSnapshot();
    const { signer, provider } = setupConfig();
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield snapshotHardhat(provider);
        const fakeAddress = "0x1Ea32de10D5a18e55DEBAf379B26Cc0c6952B168";
        const identityContract = yield new Identity__factory(signer).deploy(fakeAddress);
        yield identityContract.deployed();
        const txn = yield register(identityContract.address, "dril");
        const receipt = yield txn.wait(1);
        const registerEvent = findEvent("DSNPRegistryUpdate", receipt.logs);
        registerId = convertBigNumberToDSNPUserId(registerEvent.args[0]);
    }));
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield revertHardhat(provider);
    }));
    describe("follow", () => {
        describe("with a valid signer and user id", () => {
            beforeEach(() => {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer,
                    provider,
                });
            });
            it("returns a follow graph change DSNP message", () => __awaiter(void 0, void 0, void 0, function* () {
                const message = yield network.follow(registerId);
                expect(message).toMatchObject({
                    fromId: "dsnp://0000000000000000",
                    dsnpType: DSNPType.GraphChange,
                    changeType: DSNPGraphChangeType.Follow,
                    objectId: registerId,
                });
            }));
        });
        describe("without a signer", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer: undefined,
                    provider,
                });
                yield expect(network.follow(registerId)).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer,
                    provider,
                });
                yield expect(network.follow("dril")).rejects.toThrow(config.MissingUser);
            }));
        });
    });
    describe("unfollow", () => {
        describe("with a valid signer and user id", () => {
            beforeEach(() => {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer,
                    provider,
                });
            });
            it("returns a follow graph change DSNP message", () => __awaiter(void 0, void 0, void 0, function* () {
                const message = yield network.unfollow(registerId);
                expect(message).toMatchObject({
                    fromId: "dsnp://0000000000000000",
                    dsnpType: DSNPType.GraphChange,
                    changeType: DSNPGraphChangeType.Follow,
                    objectId: registerId,
                });
            }));
        });
        describe("without a signer", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: "dsnp://0000000000000000",
                    signer: undefined,
                    provider,
                });
                yield expect(network.unfollow(registerId)).rejects.toThrow(config.MissingSigner);
            }));
        });
        describe("without a user id", () => {
            it("throws MissingUser", () => __awaiter(void 0, void 0, void 0, function* () {
                config.setConfig({
                    currentFromId: undefined,
                    signer,
                    provider,
                });
                yield expect(network.unfollow(registerId)).rejects.toThrow(config.MissingUser);
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25ldHdvcmsudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUNuQyxPQUFPLEtBQUssT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEYsT0FBTyxFQUFFLDRCQUE0QixFQUFjLE1BQU0sOEJBQThCLENBQUM7QUFFeEYsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDdkIsSUFBSSxVQUFzQixDQUFDO0lBRTNCLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsV0FBVyxFQUFFLENBQUM7SUFFM0MsU0FBUyxDQUFDLEdBQVMsRUFBRTtRQUNuQixNQUFNLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVoQyxNQUFNLFdBQVcsR0FBRyw0Q0FBNEMsQ0FBQztRQUNqRSxNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakYsTUFBTSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVsQyxNQUFNLEdBQUcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEUsVUFBVSxHQUFHLDRCQUE0QixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEdBQVMsRUFBRTtRQUNsQixNQUFNLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDdEIsUUFBUSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtZQUMvQyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLE1BQU0sQ0FBQyxTQUFTLENBQUM7b0JBQ2YsYUFBYSxFQUFFLHlCQUF5QjtvQkFDeEMsTUFBTTtvQkFDTixRQUFRO2lCQUNULENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEdBQVMsRUFBRTtnQkFDMUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUVqRCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBYSxDQUFDO29CQUM1QixNQUFNLEVBQUUseUJBQXlCO29CQUNqQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFdBQVc7b0JBQzlCLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxNQUFNO29CQUN0QyxRQUFRLEVBQUUsVUFBVTtpQkFDckIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtZQUNoQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsR0FBUyxFQUFFO2dCQUNsQyxNQUFNLENBQUMsU0FBUyxDQUFDO29CQUNmLGFBQWEsRUFBRSx5QkFBeUI7b0JBQ3hDLE1BQU0sRUFBRSxTQUFTO29CQUNqQixRQUFRO2lCQUNULENBQUMsQ0FBQztnQkFFSCxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDakYsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtZQUNqQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsR0FBUyxFQUFFO2dCQUNsQyxNQUFNLENBQUMsU0FBUyxDQUFDO29CQUNmLGFBQWEsRUFBRSxTQUFTO29CQUN4QixNQUFNO29CQUNOLFFBQVE7aUJBQ1QsQ0FBQyxDQUFDO2dCQUVILE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzRSxDQUFDLENBQUEsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1FBQ3hCLFFBQVEsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDL0MsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxNQUFNLENBQUMsU0FBUyxDQUFDO29CQUNmLGFBQWEsRUFBRSx5QkFBeUI7b0JBQ3hDLE1BQU07b0JBQ04sUUFBUTtpQkFDVCxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFTLEVBQUU7Z0JBQzFELE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFbkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQztvQkFDNUIsTUFBTSxFQUFFLHlCQUF5QjtvQkFDakMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxXQUFXO29CQUM5QixVQUFVLEVBQUUsbUJBQW1CLENBQUMsTUFBTTtvQkFDdEMsUUFBUSxFQUFFLFVBQVU7aUJBQ3JCLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7WUFDaEMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEdBQVMsRUFBRTtnQkFDbEMsTUFBTSxDQUFDLFNBQVMsQ0FBQztvQkFDZixhQUFhLEVBQUUseUJBQXlCO29CQUN4QyxNQUFNLEVBQUUsU0FBUztvQkFDakIsUUFBUTtpQkFDVCxDQUFDLENBQUM7Z0JBRUgsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ25GLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7WUFDakMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEdBQVMsRUFBRTtnQkFDbEMsTUFBTSxDQUFDLFNBQVMsQ0FBQztvQkFDZixhQUFhLEVBQUUsU0FBUztvQkFDeEIsTUFBTTtvQkFDTixRQUFRO2lCQUNULENBQUMsQ0FBQztnQkFFSCxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDakYsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9
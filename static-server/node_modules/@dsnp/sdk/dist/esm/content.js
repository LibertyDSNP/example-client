var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { keccak256 } from "js-sha3";
import * as activityPub from "./core/activityPub/activityPub";
import * as config from "./config";
import * as messages from "./core/messages/messages";
import { validateDSNPMessageId } from "./core/utilities";
import { requireGetStore } from "./config";
export const InvalidActivityPubOpts = new Error("Invalid activity pub options.");
export const InvalidInReplyTo = new Error("Invalid DSNP Message Id for inReplyTo");
export const broadcast = (contentOptions, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contentObj = activityPub.create(contentOptions);
    if (!activityPub.isValid(contentObj))
        throw InvalidActivityPubOpts;
    const content = activityPub.serialize(contentObj);
    const currentFromId = config.requireGetCurrentFromId(opts);
    const contentHash = keccak256(content);
    const store = requireGetStore(opts);
    const url = yield store.put(contentHash, content);
    const message = messages.createBroadcastMessage(currentFromId, url.toString(), contentHash);
    const signedMessage = yield messages.sign(message, opts);
    return signedMessage;
});
export const reply = (contentOptions, inReplyTo, opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (!validateDSNPMessageId(inReplyTo))
        throw InvalidInReplyTo;
    const contentObj = activityPub.create(contentOptions);
    if (!activityPub.isValidReply(contentObj))
        throw InvalidActivityPubOpts;
    const content = activityPub.serialize(contentObj);
    const currentFromId = config.requireGetCurrentFromId(opts);
    const contentHash = keccak256(content);
    const store = requireGetStore(opts);
    const url = yield store.put(contentHash, content);
    const message = messages.createReplyMessage(currentFromId, url.toString(), contentHash, inReplyTo);
    const signedMessage = yield messages.sign(message, opts);
    return signedMessage;
});
export const react = (emoji, inReplyTo, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const currentFromId = config.requireGetCurrentFromId(opts);
    const message = messages.createReactionMessage(currentFromId, emoji, inReplyTo);
    const signedMessage = yield messages.sign(message, opts);
    return signedMessage;
});
export const profile = (contentOptions, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const contentObj = activityPub.create(contentOptions);
    if (!activityPub.isValidProfile(contentObj))
        throw InvalidActivityPubOpts;
    const content = activityPub.serialize(contentObj);
    const currentFromId = config.requireGetCurrentFromId(opts);
    const contentHash = keccak256(content);
    const store = requireGetStore(opts);
    const url = yield store.put(contentHash, content);
    const message = messages.createProfileMessage(currentFromId, url.toString(), contentHash);
    const signedMessage = yield messages.sign(message, opts);
    return signedMessage;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEMsT0FBTyxLQUFLLFdBQVcsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU5RCxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUNuQyxPQUFPLEtBQUssUUFBUSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFNM0MsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQU1qRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBYW5GLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUN2QixjQUEyQyxFQUMzQyxJQUF3QixFQUNzQixFQUFFO0lBQ2hELE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQUUsTUFBTSxzQkFBc0IsQ0FBQztJQUNuRSxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRWxELE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUzRCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sR0FBRyxHQUFH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